
robot_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000595c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d2c  08005d2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d34  08005d34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  20000074  08005db4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  08005db4  00020b00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f4b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027de  00000000  00000000  00031fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  000347d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  00035698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000182f6  00000000  00000000  00036470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a874  00000000  00000000  0004e766  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092a5c  00000000  00000000  00058fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eba36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000ebab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005adc 	.word	0x08005adc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08005adc 	.word	0x08005adc

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN3ros16normalizeSecNSecERmS0_>:
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	0a5a      	lsrs	r2, r3, #9
 80004f8:	490f      	ldr	r1, [pc, #60]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004fa:	fba1 1202 	umull	r1, r2, r1, r2
 80004fe:	09d2      	lsrs	r2, r2, #7
 8000500:	490e      	ldr	r1, [pc, #56]	; (800053c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000502:	fb01 f202 	mul.w	r2, r1, r2
 8000506:	1a9b      	subs	r3, r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	09db      	lsrs	r3, r3, #7
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	441a      	add	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	00044b83 	.word	0x00044b83
 800053c:	3b9aca00 	.word	0x3b9aca00

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f002 fa58 	bl	80029f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f80e 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f9aa 	bl	80008a4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000550:	f000 f91a 	bl	8000788 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000554:	f000 f8c4 	bl	80006e0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000558:	f000 f97a 	bl	8000850 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800055c:	f000 f86e 	bl	800063c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000560:	f001 fa8a 	bl	8001a78 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	e7fe      	b.n	8000564 <main+0x24>
	...

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 f973 	bl	8005862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d8:	2310      	movs	r3, #16
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fdee 	bl	80031d0 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 f9e3 	bl	80009c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f003 f848 	bl	80036b0 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000626:	f000 f9cd 	bl	80009c4 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_TIM1_Init+0x9c>)
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <MX_TIM1_Init+0xa0>)
 800065c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_TIM1_Init+0x9c>)
 8000660:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000664:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_TIM1_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_TIM1_Init+0x9c>)
 800066e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000672:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_TIM1_Init+0x9c>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_TIM1_Init+0x9c>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_TIM1_Init+0x9c>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000686:	4814      	ldr	r0, [pc, #80]	; (80006d8 <MX_TIM1_Init+0x9c>)
 8000688:	f003 fa04 	bl	8003a94 <HAL_TIM_Base_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000692:	f000 f997 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	4619      	mov	r1, r3
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_TIM1_Init+0x9c>)
 80006a4:	f003 fcac 	bl	8004000 <HAL_TIM_ConfigClockSource>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006ae:	f000 f989 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_TIM1_Init+0x9c>)
 80006c0:	f004 f82e 	bl	8004720 <HAL_TIMEx_MasterConfigSynchronization>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80006ca:	f000 f97b 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000094 	.word	0x20000094
 80006dc:	40010000 	.word	0x40010000

080006e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2224      	movs	r2, #36	; 0x24
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 f8b7 	bl	8005862 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <MX_TIM3_Init+0xa0>)
 80006fe:	4a21      	ldr	r2, [pc, #132]	; (8000784 <MX_TIM3_Init+0xa4>)
 8000700:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_TIM3_Init+0xa0>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_TIM3_Init+0xa0>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_TIM3_Init+0xa0>)
 8000710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000714:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_TIM3_Init+0xa0>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_TIM3_Init+0xa0>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000722:	2301      	movs	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800072a:	2301      	movs	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800073a:	2301      	movs	r3, #1
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	4619      	mov	r1, r3
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_TIM3_Init+0xa0>)
 800074e:	f003 f9f7 	bl	8003b40 <HAL_TIM_Encoder_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000758:	f000 f934 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_TIM3_Init+0xa0>)
 800076a:	f003 ffd9 	bl	8004720 <HAL_TIMEx_MasterConfigSynchronization>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000774:	f000 f926 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3730      	adds	r7, #48	; 0x30
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000d4 	.word	0x200000d4
 8000784:	40000400 	.word	0x40000400

08000788 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <MX_TIM4_Init+0xc0>)
 80007ac:	4a27      	ldr	r2, [pc, #156]	; (800084c <MX_TIM4_Init+0xc4>)
 80007ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_TIM4_Init+0xc0>)
 80007b2:	2254      	movs	r2, #84	; 0x54
 80007b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_TIM4_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_TIM4_Init+0xc0>)
 80007be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_TIM4_Init+0xc0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_TIM4_Init+0xc0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007d0:	481d      	ldr	r0, [pc, #116]	; (8000848 <MX_TIM4_Init+0xc0>)
 80007d2:	f003 f98a 	bl	8003aea <HAL_TIM_PWM_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80007dc:	f000 f8f2 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4619      	mov	r1, r3
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <MX_TIM4_Init+0xc0>)
 80007f0:	f003 ff96 	bl	8004720 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80007fa:	f000 f8e3 	bl	80009c4 <Error_Handler>
	  loop();
  }
 80007fe:	2360      	movs	r3, #96	; 0x60
 8000800:	607b      	str	r3, [r7, #4]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	4619      	mov	r1, r3
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <MX_TIM4_Init+0xc0>)
 8000816:	f003 fb2d 	bl	8003e74 <HAL_TIM_PWM_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
 8000820:	f000 f8d0 	bl	80009c4 <Error_Handler>
    Error_Handler();
  }
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2204      	movs	r2, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <MX_TIM4_Init+0xc0>)
 800082c:	f003 fb22 	bl	8003e74 <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM4_Init+0xb2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
 8000836:	f000 f8c5 	bl	80009c4 <Error_Handler>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <MX_TIM4_Init+0xc0>)
 800083c:	f001 ff70 	bl	8002720 <HAL_TIM_MspPostInit>
  HAL_TIM_MspPostInit(&htim4);

 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000114 	.word	0x20000114
 800084c:	40000800 	.word	0x40000800

08000850 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART2_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Instance = USART2;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 115200;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000888:	f003 ffcc 	bl	8004824 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x46>
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
 8000892:	f000 f897 	bl	80009c4 <Error_Handler>
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000154 	.word	0x20000154
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
{
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <MX_GPIO_Init+0x10c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a3b      	ldr	r2, [pc, #236]	; (80009b0 <MX_GPIO_Init+0x10c>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <MX_GPIO_Init+0x10c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <MX_GPIO_Init+0x10c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a34      	ldr	r2, [pc, #208]	; (80009b0 <MX_GPIO_Init+0x10c>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <MX_GPIO_Init+0x10c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MX_GPIO_Init+0x10c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a2d      	ldr	r2, [pc, #180]	; (80009b0 <MX_GPIO_Init+0x10c>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_GPIO_Init+0x10c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_GPIO_Init+0x10c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <MX_GPIO_Init+0x10c>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_GPIO_Init+0x10c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000930:	4820      	ldr	r0, [pc, #128]	; (80009b4 <MX_GPIO_Init+0x110>)
 8000932:	f002 fc0f 	bl	8003154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, Ld2_Pin|MOTOR2_PWM_Pin|MOTOR_PWM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 714c 	mov.w	r1, #816	; 0x330
 800093c:	481e      	ldr	r0, [pc, #120]	; (80009b8 <MX_GPIO_Init+0x114>)
 800093e:	f002 fc09 	bl	8003154 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_GPIO_Init+0x118>)
 800094a:	61bb      	str	r3, [r7, #24]

 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  /*Configure GPIO pins : Ld2_Pin MOTOR2_PWM_Pin MOTOR_PWM_Pin */
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	481a      	ldr	r0, [pc, #104]	; (80009c0 <MX_GPIO_Init+0x11c>)
 8000958:	f002 fa7a 	bl	8002e50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Ld2_Pin|MOTOR2_PWM_Pin|MOTOR_PWM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]

 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  /* EXTI interrupt init*/
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <MX_GPIO_Init+0x110>)
 8000976:	f002 fa6b 	bl	8002e50 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

 800097a:	f44f 734c 	mov.w	r3, #816	; 0x330
 800097e:	617b      	str	r3, [r7, #20]
}
 8000980:	2301      	movs	r3, #1
 8000982:	61bb      	str	r3, [r7, #24]

 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
/* USER CODE BEGIN 4 */
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]

 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <MX_GPIO_Init+0x114>)
 8000994:	f002 fa5c 	bl	8002e50 <HAL_GPIO_Init>
/* USER CODE END 4 */

/**
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2028      	movs	r0, #40	; 0x28
 800099e:	f002 f978 	bl	8002c92 <HAL_NVIC_SetPriority>
  * @brief  This function is executed in case of error occurrence.
 80009a2:	2028      	movs	r0, #40	; 0x28
 80009a4:	f002 f991 	bl	8002cca <HAL_NVIC_EnableIRQ>
  * @retval None
  */
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400
 80009bc:	10110000 	.word	0x10110000
 80009c0:	40020800 	.word	0x40020800

080009c4 <Error_Handler>:
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <_ZN3ros3MsgC1Ev+0x1c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	08005d04 	.word	0x08005d04

08000a14 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
      data()
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ffe8 	bl	80009f4 <_ZN3ros3MsgC1Ev>
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ffcf 	bl	80009d2 <_ZN3ros4TimeC1Ev>
    {
    }
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	08005cec 	.word	0x08005cec

08000a44 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6859      	ldr	r1, [r3, #4]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b2ca      	uxtb	r2, r1
 8000a5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	0a19      	lsrs	r1, r3, #8
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	683a      	ldr	r2, [r7, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	b2ca      	uxtb	r2, r1
 8000a70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	0c19      	lsrs	r1, r3, #16
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	b2ca      	uxtb	r2, r1
 8000a82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	0e19      	lsrs	r1, r3, #24
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3303      	adds	r3, #3
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	4413      	add	r3, r2
 8000a92:	b2ca      	uxtb	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6899      	ldr	r1, [r3, #8]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	0a19      	lsrs	r1, r3, #8
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	683a      	ldr	r2, [r7, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b2ca      	uxtb	r2, r1
 8000aba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	0c19      	lsrs	r1, r3, #16
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	b2ca      	uxtb	r2, r1
 8000acc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	0e19      	lsrs	r1, r3, #24
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3303      	adds	r3, #3
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	b2ca      	uxtb	r2, r1
 8000ade:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	60fb      	str	r3, [r7, #12]
      return offset;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3301      	adds	r3, #1
 8000b18:	6839      	ldr	r1, [r7, #0]
 8000b1a:	440b      	add	r3, r1
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	431a      	orrs	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	6839      	ldr	r1, [r7, #0]
 8000b30:	440b      	add	r3, r1
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	041b      	lsls	r3, r3, #16
 8000b36:	431a      	orrs	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3303      	adds	r3, #3
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	440b      	add	r3, r1
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	061b      	lsls	r3, r3, #24
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3304      	adds	r3, #4
 8000b56:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3302      	adds	r3, #2
 8000b84:	6839      	ldr	r1, [r7, #0]
 8000b86:	440b      	add	r3, r1
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	041b      	lsls	r3, r3, #16
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3303      	adds	r3, #3
 8000b9a:	6839      	ldr	r1, [r7, #0]
 8000b9c:	440b      	add	r3, r1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	061b      	lsls	r3, r3, #24
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3304      	adds	r3, #4
 8000bac:	60fb      	str	r3, [r7, #12]
     return offset;
 8000bae:	68fb      	ldr	r3, [r7, #12]
    }
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	08005af4 	.word	0x08005af4

08000bd8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	08005b04 	.word	0x08005b04

08000bf4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fef8 	bl	80009f4 <_ZN3ros3MsgC1Ev>
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	809a      	strh	r2, [r3, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
    {
    }
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	08005cd4 	.word	0x08005cd4
 8000c38:	08005b28 	.word	0x08005b28

08000c3c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	8899      	ldrh	r1, [r3, #4]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	b2ca      	uxtb	r2, r1
 8000c56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	889b      	ldrh	r3, [r3, #4]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	b299      	uxth	r1, r3
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	3301      	adds	r3, #1
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	3302      	adds	r3, #2
 8000c70:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff faae 	bl	80001d8 <strlen>
 8000c7c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	69b9      	ldr	r1, [r7, #24]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 ff06 	bl	8001a98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	18d0      	adds	r0, r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f004 fdd4 	bl	800584c <memcpy>
      offset += length_topic_name;
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4413      	add	r3, r2
 8000caa:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fa91 	bl	80001d8 <strlen>
 8000cb6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	6979      	ldr	r1, [r7, #20]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fee9 	bl	8001a98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	18d0      	adds	r0, r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f004 fdb7 	bl	800584c <memcpy>
      offset += length_message_type;
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fa74 	bl	80001d8 <strlen>
 8000cf0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	6939      	ldr	r1, [r7, #16]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fecc 	bl	8001a98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	3304      	adds	r3, #4
 8000d04:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	18d0      	adds	r0, r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4619      	mov	r1, r3
 8000d14:	f004 fd9a 	bl	800584c <memcpy>
      offset += length_md5sum;
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000d26:	68f9      	ldr	r1, [r7, #12]
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2ca      	uxtb	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	0a19      	lsrs	r1, r3, #8
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	b2ca      	uxtb	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	0c19      	lsrs	r1, r3, #16
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3302      	adds	r3, #2
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	0e19      	lsrs	r1, r3, #24
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3303      	adds	r3, #3
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	61fb      	str	r3, [r7, #28]
      return offset;
 8000d68:	69fb      	ldr	r3, [r7, #28]
    }
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b08a      	sub	sp, #40	; 0x28
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	889b      	ldrh	r3, [r3, #4]
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	3301      	adds	r3, #1
 8000d98:	6839      	ldr	r1, [r7, #0]
 8000d9a:	440b      	add	r3, r1
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	3302      	adds	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	441a      	add	r2, r3
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fe88 	bl	8001ad4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d20c      	bcs.n	8000df4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	441a      	add	r2, r3
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6839      	ldr	r1, [r7, #0]
 8000de6:	440b      	add	r3, r1
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	3301      	adds	r3, #1
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
 8000df2:	e7ec      	b.n	8000dce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	441a      	add	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	441a      	add	r2, r3
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fe55 	bl	8001ad4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	623b      	str	r3, [r7, #32]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4413      	add	r3, r2
 8000e3a:	6a3a      	ldr	r2, [r7, #32]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d20c      	bcs.n	8000e5a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	441a      	add	r2, r3
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	440b      	add	r3, r1
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	3301      	adds	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
 8000e58:	e7ec      	b.n	8000e34 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4413      	add	r3, r2
 8000e60:	3b01      	subs	r3, #1
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	441a      	add	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	441a      	add	r2, r3
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fe22 	bl	8001ad4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	3304      	adds	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	69fa      	ldr	r2, [r7, #28]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d20c      	bcs.n	8000ec0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	441a      	add	r2, r3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6839      	ldr	r1, [r7, #0]
 8000eb2:	440b      	add	r3, r1
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	e7ec      	b.n	8000e9a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	441a      	add	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	440a      	add	r2, r1
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	3301      	adds	r3, #1
 8000efc:	6839      	ldr	r1, [r7, #0]
 8000efe:	440b      	add	r3, r1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	4313      	orrs	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	440b      	add	r3, r1
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	3303      	adds	r3, #3
 8000f20:	6839      	ldr	r1, [r7, #0]
 8000f22:	440b      	add	r3, r1
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	061b      	lsls	r3, r3, #24
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	3304      	adds	r3, #4
 8000f36:	61bb      	str	r3, [r7, #24]
     return offset;
 8000f38:	69bb      	ldr	r3, [r7, #24]
    }
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3728      	adds	r7, #40	; 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	08005b2c 	.word	0x08005b2c

08000f60 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	08005b48 	.word	0x08005b48

08000f7c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fd34 	bl	80009f4 <_ZN3ros3MsgC1Ev>
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	711a      	strb	r2, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000f9c:	609a      	str	r2, [r3, #8]
    {
    }
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08005cbc 	.word	0x08005cbc
 8000fac:	08005b28 	.word	0x08005b28

08000fb0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	7912      	ldrb	r2, [r2, #4]
 8000fc8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f8ff 	bl	80001d8 <strlen>
 8000fda:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fd57 	bl	8001a98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3304      	adds	r3, #4
 8000fee:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	18d0      	adds	r0, r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f004 fc25 	bl	800584c <memcpy>
      offset += length_msg;
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
      return offset;
 800100a:	68fb      	ldr	r3, [r7, #12]
    }
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	4413      	add	r3, r2
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	441a      	add	r2, r3
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fd47 	bl	8001ad4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	3304      	adds	r3, #4
 800104a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	d20c      	bcs.n	8001076 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	441a      	add	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3b01      	subs	r3, #1
 8001066:	6839      	ldr	r1, [r7, #0]
 8001068:	440b      	add	r3, r1
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e7ec      	b.n	8001050 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	3b01      	subs	r3, #1
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	4413      	add	r3, r2
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	3b01      	subs	r3, #1
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	441a      	add	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
     return offset;
 800109a:	693b      	ldr	r3, [r7, #16]
    }
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	08005b6c 	.word	0x08005b6c

080010c0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	08005b80 	.word	0x08005b80

080010dc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fc84 	bl	80009f4 <_ZN3ros3MsgC1Ev>
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	08005ca4 	.word	0x08005ca4

08001124 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6859      	ldr	r1, [r3, #4]
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	4413      	add	r3, r2
 800113c:	b2ca      	uxtb	r2, r1
 800113e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	0a19      	lsrs	r1, r3, #8
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	3301      	adds	r3, #1
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	4413      	add	r3, r2
 800114e:	b2ca      	uxtb	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	0c19      	lsrs	r1, r3, #16
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	3302      	adds	r3, #2
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	4413      	add	r3, r2
 8001160:	b2ca      	uxtb	r2, r1
 8001162:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	0e19      	lsrs	r1, r3, #24
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	3303      	adds	r3, #3
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	4413      	add	r3, r2
 8001172:	b2ca      	uxtb	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	3304      	adds	r3, #4
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	6a3a      	ldr	r2, [r7, #32]
 8001186:	429a      	cmp	r2, r3
 8001188:	d22b      	bcs.n	80011e2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001198:	6939      	ldr	r1, [r7, #16]
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	b2ca      	uxtb	r2, r1
 80011a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	0a19      	lsrs	r1, r3, #8
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	3301      	adds	r3, #1
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	b2ca      	uxtb	r2, r1
 80011b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	0c19      	lsrs	r1, r3, #16
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	3302      	adds	r3, #2
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	b2ca      	uxtb	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	0e19      	lsrs	r1, r3, #24
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	3303      	adds	r3, #3
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	b2ca      	uxtb	r2, r1
 80011d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	3304      	adds	r3, #4
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	3301      	adds	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
 80011e0:	e7ce      	b.n	8001180 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6919      	ldr	r1, [r3, #16]
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	b2ca      	uxtb	r2, r1
 80011ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	0a19      	lsrs	r1, r3, #8
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	3301      	adds	r3, #1
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	b2ca      	uxtb	r2, r1
 8001200:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	0c19      	lsrs	r1, r3, #16
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	3302      	adds	r3, #2
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	b2ca      	uxtb	r2, r1
 8001212:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	0e19      	lsrs	r1, r3, #24
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	3303      	adds	r3, #3
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	4413      	add	r3, r2
 8001222:	b2ca      	uxtb	r2, r1
 8001224:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	3304      	adds	r3, #4
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	429a      	cmp	r2, r3
 8001238:	d22b      	bcs.n	8001292 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001248:	68f9      	ldr	r1, [r7, #12]
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	4413      	add	r3, r2
 8001250:	b2ca      	uxtb	r2, r1
 8001252:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	0a19      	lsrs	r1, r3, #8
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	3301      	adds	r3, #1
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4413      	add	r3, r2
 8001260:	b2ca      	uxtb	r2, r1
 8001262:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	0c19      	lsrs	r1, r3, #16
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	3302      	adds	r3, #2
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4413      	add	r3, r2
 8001270:	b2ca      	uxtb	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	0e19      	lsrs	r1, r3, #24
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	3303      	adds	r3, #3
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	4413      	add	r3, r2
 8001280:	b2ca      	uxtb	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	3304      	adds	r3, #4
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	e7ce      	b.n	8001230 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69d9      	ldr	r1, [r3, #28]
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	4413      	add	r3, r2
 800129c:	b2ca      	uxtb	r2, r1
 800129e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	0a19      	lsrs	r1, r3, #8
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	3301      	adds	r3, #1
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	b2ca      	uxtb	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	0c19      	lsrs	r1, r3, #16
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	3302      	adds	r3, #2
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	b2ca      	uxtb	r2, r1
 80012c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	0e19      	lsrs	r1, r3, #24
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	3303      	adds	r3, #3
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	3304      	adds	r3, #4
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d228      	bcs.n	800133c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7fe ff6e 	bl	80001d8 <strlen>
 80012fc:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	4413      	add	r3, r2
 8001304:	6979      	ldr	r1, [r7, #20]
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fbc6 	bl	8001a98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	3304      	adds	r3, #4
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	18d0      	adds	r0, r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	4619      	mov	r1, r3
 8001328:	f004 fa90 	bl	800584c <memcpy>
      offset += length_stringsi;
 800132c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	3301      	adds	r3, #1
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	e7d1      	b.n	80012e0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800133e:	4618      	mov	r0, r3
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001346:	b580      	push	{r7, lr}
 8001348:	b08e      	sub	sp, #56	; 0x38
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001360:	3301      	adds	r3, #1
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	6a3a      	ldr	r2, [r7, #32]
 800136c:	4313      	orrs	r3, r2
 800136e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001372:	3302      	adds	r3, #2
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	4413      	add	r3, r2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	041b      	lsls	r3, r3, #16
 800137c:	6a3a      	ldr	r2, [r7, #32]
 800137e:	4313      	orrs	r3, r2
 8001380:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001384:	3303      	adds	r3, #3
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	061b      	lsls	r3, r3, #24
 800138e:	6a3a      	ldr	r2, [r7, #32]
 8001390:	4313      	orrs	r3, r2
 8001392:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001396:	3304      	adds	r3, #4
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	6a3a      	ldr	r2, [r7, #32]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d90a      	bls.n	80013ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4619      	mov	r1, r3
 80013ae:	4610      	mov	r0, r2
 80013b0:	f004 fa60 	bl	8005874 <realloc>
 80013b4:	4602      	mov	r2, r0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a3a      	ldr	r2, [r7, #32]
 80013be:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d236      	bcs.n	800143c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013d6:	6839      	ldr	r1, [r7, #0]
 80013d8:	440a      	add	r2, r1
 80013da:	7812      	ldrb	r2, [r2, #0]
 80013dc:	4313      	orrs	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e4:	3301      	adds	r3, #1
 80013e6:	6839      	ldr	r1, [r7, #0]
 80013e8:	440b      	add	r3, r1
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4313      	orrs	r3, r2
 80013f0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	3302      	adds	r3, #2
 80013f8:	6839      	ldr	r1, [r7, #0]
 80013fa:	440b      	add	r3, r1
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	041b      	lsls	r3, r3, #16
 8001400:	4313      	orrs	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001408:	3303      	adds	r3, #3
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	440b      	add	r3, r1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	061b      	lsls	r3, r3, #24
 8001412:	4313      	orrs	r3, r2
 8001414:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141e:	3304      	adds	r3, #4
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	3208      	adds	r2, #8
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001436:	3301      	adds	r3, #1
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
 800143a:	e7c3      	b.n	80013c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001448:	3301      	adds	r3, #1
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	4413      	add	r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	4313      	orrs	r3, r2
 8001456:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145a:	3302      	adds	r3, #2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	041b      	lsls	r3, r3, #16
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	4313      	orrs	r3, r2
 8001468:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146c:	3303      	adds	r3, #3
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	4313      	orrs	r3, r2
 800147a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147e:	3304      	adds	r3, #4
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	429a      	cmp	r2, r3
 800148a:	d90a      	bls.n	80014a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4619      	mov	r1, r3
 8001496:	4610      	mov	r0, r2
 8001498:	f004 f9ec 	bl	8005874 <realloc>
 800149c:	4602      	mov	r2, r0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d236      	bcs.n	8001524 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	440a      	add	r2, r1
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014cc:	3301      	adds	r3, #1
 80014ce:	6839      	ldr	r1, [r7, #0]
 80014d0:	440b      	add	r3, r1
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014de:	3302      	adds	r3, #2
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	440b      	add	r3, r1
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	041b      	lsls	r3, r3, #16
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f0:	3303      	adds	r3, #3
 80014f2:	6839      	ldr	r1, [r7, #0]
 80014f4:	440b      	add	r3, r1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001506:	3304      	adds	r3, #4
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	3214      	adds	r2, #20
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151e:	3301      	adds	r3, #1
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001522:	e7c3      	b.n	80014ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	4413      	add	r3, r2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001530:	3301      	adds	r3, #1
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001542:	3302      	adds	r3, #2
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	4413      	add	r3, r2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	041b      	lsls	r3, r3, #16
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001554:	3303      	adds	r3, #3
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	061b      	lsls	r3, r3, #24
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001566:	3304      	adds	r3, #4
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	429a      	cmp	r2, r3
 8001572:	d90a      	bls.n	800158a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f004 f978 	bl	8005874 <realloc>
 8001584:	4602      	mov	r2, r0
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800159a:	429a      	cmp	r2, r3
 800159c:	d23f      	bcs.n	800161e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800159e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	441a      	add	r2, r3
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fa92 	bl	8001ad4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	3304      	adds	r3, #4
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80015b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d20c      	bcs.n	80015e0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	441a      	add	r2, r3
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	440b      	add	r3, r1
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	e7ec      	b.n	80015ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80015e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4413      	add	r3, r2
 80015e6:	3b01      	subs	r3, #1
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80015f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f2:	3b01      	subs	r3, #1
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	441a      	add	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80015fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4413      	add	r3, r2
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	3220      	adds	r2, #32
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001618:	3301      	adds	r3, #1
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
 800161c:	e7ba      	b.n	8001594 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800161e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001620:	4618      	mov	r0, r3
 8001622:	3738      	adds	r7, #56	; 0x38
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	08005c40 	.word	0x08005c40

08001644 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	08005ba4 	.word	0x08005ba4

08001660 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
  }
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	425b      	negs	r3, r3
 80016ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <_ZN13STM32HardwareC1Ev+0x34>)
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	20000154 	.word	0x20000154

08001704 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f804 	bl	800171a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3304      	adds	r3, #4
 800172a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172e:	4619      	mov	r1, r3
 8001730:	f003 f932 	bl	8004998 <HAL_UART_Receive_DMA>
    }
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZN13STM32Hardware4readEv>:

    int read(){
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ffa8 	bl	80016a6 <_ZN13STM32Hardware10getRdmaIndEv>
 8001756:	4603      	mov	r3, r0
 8001758:	429c      	cmp	r4, r3
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d012      	beq.n	800178c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800176c:	1c59      	adds	r1, r3, #1
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	791b      	ldrb	r3, [r3, #4]
 800177a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800178c:	68fb      	ldr	r3, [r7, #12]
    }
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
	...

08001798 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b20      	cmp	r3, #32
 80017ac:	d108      	bne.n	80017c0 <_ZN13STM32Hardware5flushEv+0x28>
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <_ZN13STM32Hardware5flushEv+0xb8>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f083 0301 	eor.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <_ZN13STM32Hardware5flushEv+0x28>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <_ZN13STM32Hardware5flushEv+0x2a>
 80017c0:	2300      	movs	r3, #0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d03f      	beq.n	8001846 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <_ZN13STM32Hardware5flushEv+0xb8>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017d8:	429a      	cmp	r2, r3
 80017da:	d031      	beq.n	8001840 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d20a      	bcs.n	8001802 <_ZN13STM32Hardware5flushEv+0x6a>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	b29b      	uxth	r3, r3
 8001800:	e006      	b.n	8001810 <_ZN13STM32Hardware5flushEv+0x78>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001808:	b29b      	uxth	r3, r3
 800180a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800180e:	b29b      	uxth	r3, r3
 8001810:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800181c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	89fa      	ldrh	r2, [r7, #14]
 8001826:	4619      	mov	r1, r3
 8001828:	f003 f84a 	bl	80048c0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001832:	89fb      	ldrh	r3, [r7, #14]
 8001834:	4413      	add	r3, r2
 8001836:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
      }
    }
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000090 	.word	0x20000090

08001854 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800186a:	bfa8      	it	ge
 800186c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001870:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001878:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	4293      	cmp	r3, r2
 8001880:	bf28      	it	cs
 8001882:	4613      	movcs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800188c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 ffd7 	bl	800584c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	4413      	add	r3, r2
 80018a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d00b      	beq.n	80018d2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	18d1      	adds	r1, r2, r3
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	f003 ffbd 	bl	800584c <memcpy>
      }

      flush();
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7ff ff60 	bl	8001798 <_ZN13STM32Hardware5flushEv>
    }
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	f001 f8ec 	bl	8002ac4 <HAL_GetTick>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
      data("")
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f876 	bl	80009f4 <_ZN3ros3MsgC1Ev>
 8001908:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_ZN8std_msgs6StringC1Ev+0x28>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001912:	605a      	str	r2, [r3, #4]
    {
    }
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	08005c78 	.word	0x08005c78
 8001924:	08005b28 	.word	0x08005b28

08001928 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fc4c 	bl	80001d8 <strlen>
 8001940:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	4413      	add	r3, r2
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f8a4 	bl	8001a98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3304      	adds	r3, #4
 8001954:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	18d0      	adds	r0, r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	4619      	mov	r1, r3
 8001964:	f003 ff72 	bl	800584c <memcpy>
      offset += length_data;
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001970:	68fb      	ldr	r3, [r7, #12]
    }
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	441a      	add	r2, r3
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f89d 	bl	8001ad4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	3304      	adds	r3, #4
 800199e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4413      	add	r3, r2
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d20c      	bcs.n	80019ca <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	441a      	add	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	440b      	add	r3, r1
 80019be:	7812      	ldrb	r2, [r2, #0]
 80019c0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e7ec      	b.n	80019a4 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	3b01      	subs	r3, #1
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	3b01      	subs	r3, #1
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	441a      	add	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
     return offset;
 80019ee:	693b      	ldr	r3, [r7, #16]
    }
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	08005bc8 	.word	0x08005bc8

08001a14 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	08005bd8 	.word	0x08005bd8

08001a30 <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_UART_TxCpltCallback+0x20>)
 8001a3a:	f000 f901 	bl	8001c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fea9 	bl	8001798 <_ZN13STM32Hardware5flushEv>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000194 	.word	0x20000194

08001a54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <HAL_UART_RxCpltCallback+0x20>)
 8001a5e:	f000 f8ef 	bl	8001c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fe58 	bl	800171a <_ZN13STM32Hardware10reset_rbufEv>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000194 	.word	0x20000194

08001a78 <setup>:

void setup(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  nh.initNode();
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <setup+0x18>)
 8001a7e:	f000 f8eb 	bl	8001c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 8001a82:	4904      	ldr	r1, [pc, #16]	; (8001a94 <setup+0x1c>)
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <setup+0x18>)
 8001a86:	f000 f904 	bl	8001c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000194 	.word	0x20000194
 8001a94:	20000ad8 	.word	0x20000ad8

08001a98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d80d      	bhi.n	8001ac8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	fa22 f103 	lsr.w	r1, r2, r3
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	b2ca      	uxtb	r2, r1
 8001abe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e7ee      	b.n	8001aa6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d811      	bhi.n	8001b12 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6839      	ldr	r1, [r7, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	440a      	add	r2, r1
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	4611      	mov	r1, r2
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	00d2      	lsls	r2, r2, #3
 8001b00:	fa01 f202 	lsl.w	r2, r1, r2
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e7ea      	b.n	8001ae8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	08005c90 	.word	0x08005c90

08001b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ffe8 	bl	8001b20 <_ZN3ros15NodeHandleBase_C1Ev>
 8001b50:	4a3a      	ldr	r2, [pc, #232]	; (8001c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fdb6 	bl	80016cc <_ZN13STM32HardwareC1Ev>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fab4 	bl	80010dc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b18      	cmp	r3, #24
 8001b7c:	d80b      	bhi.n	8001b96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e7f0      	b.n	8001b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b18      	cmp	r3, #24
 8001b9e:	d80a      	bhi.n	8001bb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	e7f1      	b.n	8001b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc0:	d20a      	bcs.n	8001bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e7f0      	b.n	8001bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be2:	d20a      	bcs.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	4413      	add	r3, r2
 8001bea:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	e7f0      	b.n	8001bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	08005c64 	.word	0x08005c64

08001c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
  }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fd4d 	bl	8001704 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b18      	cmp	r3, #24
 8001ca4:	dc1e      	bgt.n	8001ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d111      	bne.n	8001cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	60da      	str	r2, [r3, #12]
        return true;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e004      	b.n	8001ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e7dd      	b.n	8001ca0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001ce4:	2300      	movs	r3, #0
  }
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fdee 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 8001d04:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d903      	bls.n	8001d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d903      	bls.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d014      	beq.n	8001d72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fdc7 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 8001d52:	4602      	mov	r2, r0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1ad2      	subs	r2, r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	bf8c      	ite	hi
 8001d62:	2301      	movhi	r3, #1
 8001d64:	2300      	movls	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001d6c:	f06f 0301 	mvn.w	r3, #1
 8001d70:	e197      	b.n	80020a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fce0 	bl	800173c <_ZN13STM32Hardware4readEv>
 8001d7c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f2c0 8177 	blt.w	8002074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	441a      	add	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d9c:	2b07      	cmp	r3, #7
 8001d9e:	d11e      	bne.n	8001dde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001da6:	1c59      	adds	r1, r3, #1
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	b2d1      	uxtb	r1, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	460a      	mov	r2, r1
 8001db8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001dc2:	1e5a      	subs	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1b4      	bne.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ddc:	e7af      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d128      	bne.n	8001e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2bff      	cmp	r3, #255	; 0xff
 8001dec:	d10d      	bne.n	8001e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f103 0214 	add.w	r2, r3, #20
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001e08:	e799      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fd66 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	bf8c      	ite	hi
 8001e22:	2301      	movhi	r3, #1
 8001e24:	2300      	movls	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d088      	beq.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001e34:	f06f 0301 	mvn.w	r3, #1
 8001e38:	e133      	b.n	80020a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d11b      	bne.n	8001e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2bfe      	cmp	r3, #254	; 0xfe
 8001e48:	d107      	bne.n	8001e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e58:	e771      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f43f af65 	beq.w	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f918 	bl	80020aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001e7a:	e760      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d113      	bne.n	8001eae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001eac:	e747      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d110      	bne.n	8001eda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	441a      	add	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ed8:	e731      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d116      	bne.n	8001f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001eea:	425a      	negs	r2, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	bf58      	it	pl
 8001ef2:	4253      	negpl	r3, r2
 8001ef4:	2bff      	cmp	r3, #255	; 0xff
 8001ef6:	d107      	bne.n	8001f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f06:	e71a      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f10:	e715      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d10f      	bne.n	8001f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001f3a:	e700      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d117      	bne.n	8001f76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	441a      	add	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f47f aee9 	bne.w	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2208      	movs	r2, #8
 8001f70:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f74:	e6e3      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	f47f aede 	bne.w	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001f90:	425a      	negs	r2, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	bf58      	it	pl
 8001f98:	4253      	negpl	r3, r2
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	f47f aecf 	bne.w	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d110      	bne.n	8001fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f87d 	bl	80020aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f898 	bl	80020e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e06a      	b.n	80020a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001fd2:	2b0a      	cmp	r3, #10
 8001fd4:	d107      	bne.n	8001fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f960 	bl	80022a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001fe4:	e6ab      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001fec:	2b06      	cmp	r3, #6
 8001fee:	d10e      	bne.n	800200e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f7ff f9a1 	bl	8001346 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800200c:	e697      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002014:	2b0b      	cmp	r3, #11
 8002016:	d104      	bne.n	8002022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002020:	e68d      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002028:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f43f ae81 	beq.w	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002042:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f202 2222 	addw	r2, r2, #546	; 0x222
 800204c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002056:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800206e:	4611      	mov	r1, r2
 8002070:	4798      	blx	r3
    while (true)
 8002072:	e664      	b.n	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002074:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00f      	beq.n	80020a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800208e:	4293      	cmp	r3, r2
 8002090:	d906      	bls.n	80020a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f809 	bl	80020aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80020a0:	2300      	movs	r3, #0
  }
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fcac 	bl	8000a14 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f107 020c 	add.w	r2, r7, #12
 80020c6:	210a      	movs	r1, #10
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
    rt_time = hardware_.time();
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fc05 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 80020d6:	4602      	mov	r2, r0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80020e6:	b590      	push	{r4, r7, lr}
 80020e8:	b08b      	sub	sp, #44	; 0x2c
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fd7e 	bl	8000bf4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	2b18      	cmp	r3, #24
 8002100:	dc63      	bgt.n	80021ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d056      	beq.n	80021c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	b29b      	uxth	r3, r3
 8002126:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3308      	adds	r3, #8
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4608      	mov	r0, r1
 8002162:	4798      	blx	r3
 8002164:	4603      	mov	r3, r0
 8002166:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	330c      	adds	r3, #12
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4608      	mov	r0, r1
 8002190:	4798      	blx	r3
 8002192:	4603      	mov	r3, r0
 8002194:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681c      	ldr	r4, [r3, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fa6c 	bl	800168e <_ZN3ros9Publisher15getEndpointTypeEv>
 80021b6:	4601      	mov	r1, r0
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	461a      	mov	r2, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	3301      	adds	r3, #1
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	e798      	b.n	80020fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	2b18      	cmp	r3, #24
 80021d2:	dc5f      	bgt.n	8002294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d053      	beq.n	800228c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800220e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002216:	f202 2222 	addw	r2, r2, #546	; 0x222
 800221a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3308      	adds	r3, #8
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4608      	mov	r0, r1
 8002226:	4798      	blx	r3
 8002228:	4603      	mov	r3, r0
 800222a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4608      	mov	r0, r1
 800224c:	4798      	blx	r3
 800224e:	4603      	mov	r3, r0
 8002250:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002256:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681c      	ldr	r4, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002262:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002266:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	3304      	adds	r3, #4
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4608      	mov	r0, r1
 800227e:	4798      	blx	r3
 8002280:	4601      	mov	r1, r0
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	461a      	mov	r2, r3
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	3301      	adds	r3, #1
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	e79c      	b.n	80021ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800229c:	bf00      	nop
 800229e:	372c      	adds	r7, #44	; 0x2c
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}

080022a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fbae 	bl	8000a14 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fb0f 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 80022c2:	4602      	mov	r2, r0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fc0d 	bl	8000af4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	4915      	ldr	r1, [pc, #84]	; (8002334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80022e0:	fba1 1303 	umull	r1, r3, r1, r3
 80022e4:	099b      	lsrs	r3, r3, #6
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80022ea:	6939      	ldr	r1, [r7, #16]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80022f0:	fba3 0302 	umull	r0, r3, r3, r2
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022fa:	fb00 f303 	mul.w	r3, r0, r3
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	440b      	add	r3, r1
 8002308:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	3304      	adds	r3, #4
 8002310:	4619      	mov	r1, r3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8a4 	bl	8002460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fadf 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 8002322:	4602      	mov	r2, r0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	10624dd3 	.word	0x10624dd3
 8002338:	000f4240 	.word	0x000f4240

0800233c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b63      	cmp	r3, #99	; 0x63
 800234c:	dd09      	ble.n	8002362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002354:	f083 0301 	eor.w	r3, r3, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800235e:	2300      	movs	r3, #0
 8002360:	e077      	b.n	8002452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800236e:	3207      	adds	r2, #7
 8002370:	4611      	mov	r1, r2
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	4798      	blx	r3
 8002376:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	22ff      	movs	r2, #255	; 0xff
 800237c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	22fe      	movs	r2, #254	; 0xfe
 8002384:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	b29b      	uxth	r3, r3
 8002396:	121b      	asrs	r3, r3, #8
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80023ac:	4413      	add	r3, r2
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	121b      	asrs	r3, r3, #8
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80023d6:	2305      	movs	r3, #5
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3307      	adds	r3, #7
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	da0d      	bge.n	8002400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4413      	add	r3, r2
 80023ea:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	4413      	add	r3, r2
 80023f6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	3301      	adds	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e7ec      	b.n	80023da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3307      	adds	r3, #7
 8002404:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	425a      	negs	r2, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	bf58      	it	pl
 8002410:	4253      	negpl	r3, r2
 8002412:	b2da      	uxtb	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	1c59      	adds	r1, r3, #1
 8002418:	6179      	str	r1, [r7, #20]
 800241a:	43d2      	mvns	r2, r2
 800241c:	b2d1      	uxtb	r1, r2
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4413      	add	r3, r2
 8002422:	460a      	mov	r2, r1
 8002424:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800242e:	dc0a      	bgt.n	8002446 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1d18      	adds	r0, r3, #4
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4619      	mov	r1, r3
 800243e:	f7ff fa09 	bl	8001854 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	e005      	b.n	8002452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002446:	4905      	ldr	r1, [pc, #20]	; (800245c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f849 	bl	80024e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	08005bfc 	.word	0x08005bfc

08002460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3304      	adds	r3, #4
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fa36 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 8002474:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4915      	ldr	r1, [pc, #84]	; (80024d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800247e:	fba1 1303 	umull	r1, r3, r1, r3
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	1e5a      	subs	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002496:	fba3 0302 	umull	r0, r3, r3, r2
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a0:	fb00 f303 	mul.w	r3, r0, r3
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	1aca      	subs	r2, r1, r3
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80024b0:	4413      	add	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f7fe f80e 	bl	80004e8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	10624dd3 	.word	0x10624dd3
 80024d8:	000f4240 	.word	0x000f4240
 80024dc:	3b9aca00 	.word	0x3b9aca00

080024e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	2103      	movs	r1, #3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f804 	bl	80024fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	460b      	mov	r3, r1
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fd34 	bl	8000f7c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002514:	7afb      	ldrb	r3, [r7, #11]
 8002516:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f107 0214 	add.w	r2, r7, #20
 8002526:	2107      	movs	r1, #7
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	4798      	blx	r3
  }
 800252c:	bf00      	nop
 800252e:	3720      	adds	r7, #32
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_Z41__static_initialization_and_destruction_0ii>:
  str_msg.data = hello;
  chatter.publish(&str_msg);
  nh.spinOnce();

  HAL_Delay(1000);
}
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d110      	bne.n	8002566 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254a:	4293      	cmp	r3, r2
 800254c:	d10b      	bne.n	8002566 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 800254e:	4808      	ldr	r0, [pc, #32]	; (8002570 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002550:	f7ff faf6 	bl	8001b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002554:	4807      	ldr	r0, [pc, #28]	; (8002574 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002556:	f7ff f9cf 	bl	80018f8 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800255a:	2300      	movs	r3, #0
 800255c:	4a05      	ldr	r2, [pc, #20]	; (8002574 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800255e:	4906      	ldr	r1, [pc, #24]	; (8002578 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002560:	4806      	ldr	r0, [pc, #24]	; (800257c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002562:	f7ff f87d 	bl	8001660 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000194 	.word	0x20000194
 8002574:	20000ad0 	.word	0x20000ad0
 8002578:	08005c38 	.word	0x08005c38
 800257c:	20000ad8 	.word	0x20000ad8

08002580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    return configured_;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_GLOBAL__sub_I_htim1>:
 800259a:	b580      	push	{r7, lr}
 800259c:	af00      	add	r7, sp, #0
 800259e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025a2:	2001      	movs	r0, #1
 80025a4:	f7ff ffc6 	bl	8002534 <_Z41__static_initialization_and_destruction_0ii>
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_MspInit>:
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_MspInit+0x4c>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <HAL_MspInit+0x4c>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	; 0x44
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_MspInit+0x4c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2300      	movs	r3, #0
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_MspInit+0x4c>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <HAL_MspInit+0x4c>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_MspInit+0x4c>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_TIM_Base_MspInit>:
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <HAL_TIM_Base_MspInit+0x48>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d115      	bne.n	800263a <HAL_TIM_Base_MspInit+0x3e>
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_TIM_Base_MspInit+0x4c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <HAL_TIM_Base_MspInit+0x4c>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_TIM_Base_MspInit+0x4c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2019      	movs	r0, #25
 8002630:	f000 fb2f 	bl	8002c92 <HAL_NVIC_SetPriority>
 8002634:	2019      	movs	r0, #25
 8002636:	f000 fb48 	bl	8002cca <HAL_NVIC_EnableIRQ>
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_TIM_Encoder_MspInit>:
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d12b      	bne.n	80026c6 <HAL_TIM_Encoder_MspInit+0x7a>
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_TIM_Encoder_MspInit+0x88>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	23c0      	movs	r3, #192	; 0xc0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	2302      	movs	r3, #2
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	2301      	movs	r3, #1
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
 80026b6:	2302      	movs	r3, #2
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	4805      	ldr	r0, [pc, #20]	; (80026d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80026c2:	f000 fbc5 	bl	8002e50 <HAL_GPIO_Init>
 80026c6:	bf00      	nop
 80026c8:	3728      	adds	r7, #40	; 0x28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40020000 	.word	0x40020000

080026dc <HAL_TIM_PWM_MspInit>:
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <HAL_TIM_PWM_MspInit+0x3c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10d      	bne.n	800270a <HAL_TIM_PWM_MspInit+0x2e>
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_TIM_PWM_MspInit+0x40>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <HAL_TIM_PWM_MspInit+0x40>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <HAL_TIM_PWM_MspInit+0x40>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40000800 	.word	0x40000800
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_TIM_MspPostInit>:
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_TIM_MspPostInit+0x68>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d11d      	bne.n	800277e <HAL_TIM_MspPostInit+0x5e>
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_TIM_MspPostInit+0x6c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_TIM_MspPostInit+0x6c>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_TIM_MspPostInit+0x6c>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	23c0      	movs	r3, #192	; 0xc0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	2302      	movs	r3, #2
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	2302      	movs	r3, #2
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	4619      	mov	r1, r3
 8002778:	4805      	ldr	r0, [pc, #20]	; (8002790 <HAL_TIM_MspPostInit+0x70>)
 800277a:	f000 fb69 	bl	8002e50 <HAL_GPIO_Init>
 800277e:	bf00      	nop
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40000800 	.word	0x40000800
 800278c:	40023800 	.word	0x40023800
 8002790:	40020400 	.word	0x40020400

08002794 <HAL_UART_MspInit>:
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <HAL_UART_MspInit+0x94>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d133      	bne.n	800281e <HAL_UART_MspInit+0x8a>
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_UART_MspInit+0x98>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a1b      	ldr	r2, [pc, #108]	; (800282c <HAL_UART_MspInit+0x98>)
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_UART_MspInit+0x98>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_UART_MspInit+0x98>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a14      	ldr	r2, [pc, #80]	; (800282c <HAL_UART_MspInit+0x98>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_UART_MspInit+0x98>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	230c      	movs	r3, #12
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	2302      	movs	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	2303      	movs	r3, #3
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	2307      	movs	r3, #7
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	4809      	ldr	r0, [pc, #36]	; (8002830 <HAL_UART_MspInit+0x9c>)
 800280a:	f000 fb21 	bl	8002e50 <HAL_GPIO_Init>
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	2026      	movs	r0, #38	; 0x26
 8002814:	f000 fa3d 	bl	8002c92 <HAL_NVIC_SetPriority>
 8002818:	2026      	movs	r0, #38	; 0x26
 800281a:	f000 fa56 	bl	8002cca <HAL_NVIC_EnableIRQ>
 800281e:	bf00      	nop
 8002820:	3728      	adds	r7, #40	; 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40004400 	.word	0x40004400
 800282c:	40023800 	.word	0x40023800
 8002830:	40020000 	.word	0x40020000

08002834 <NMI_Handler>:
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HardFault_Handler>:
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
 8002846:	e7fe      	b.n	8002846 <HardFault_Handler+0x4>

08002848 <MemManage_Handler>:
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
 800284c:	e7fe      	b.n	800284c <MemManage_Handler+0x4>

0800284e <BusFault_Handler>:
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
 8002852:	e7fe      	b.n	8002852 <BusFault_Handler+0x4>

08002854 <UsageFault_Handler>:
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
 8002858:	e7fe      	b.n	8002858 <UsageFault_Handler+0x4>

0800285a <SVC_Handler>:
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <DebugMon_Handler>:
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <PendSV_Handler>:
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
 800287a:	bf00      	nop
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <SysTick_Handler>:
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
 8002888:	f000 f908 	bl	8002a9c <HAL_IncTick>
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}

08002890 <TIM1_UP_TIM10_IRQHandler>:
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
 8002894:	4802      	ldr	r0, [pc, #8]	; (80028a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002896:	f001 f9e5 	bl	8003c64 <HAL_TIM_IRQHandler>
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000094 	.word	0x20000094

080028a4 <USART2_IRQHandler>:
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <USART2_IRQHandler+0x10>)
 80028aa:	f002 f8f5 	bl	8004a98 <HAL_UART_IRQHandler>
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000154 	.word	0x20000154

080028b8 <EXTI15_10_IRQHandler>:
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028c0:	f000 fc62 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <_getpid>:
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	2301      	movs	r3, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_kill>:
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
 80028e2:	f002 ff89 	bl	80057f8 <__errno>
 80028e6:	4602      	mov	r2, r0
 80028e8:	2316      	movs	r3, #22
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_exit>:
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffe7 	bl	80028d8 <_kill>
 800290a:	e7fe      	b.n	800290a <_exit+0x12>

0800290c <_sbrk>:
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <_sbrk+0x5c>)
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <_sbrk+0x60>)
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <_sbrk+0x22>
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <_sbrk+0x64>)
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <_sbrk+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <_sbrk+0x40>
 800293c:	f002 ff5c 	bl	80057f8 <__errno>
 8002940:	4602      	mov	r2, r0
 8002942:	230c      	movs	r3, #12
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e009      	b.n	8002960 <_sbrk+0x54>
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <_sbrk+0x64>)
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20020000 	.word	0x20020000
 800296c:	00000400 	.word	0x00000400
 8002970:	20000aec 	.word	0x20000aec
 8002974:	20000b00 	.word	0x20000b00

08002978 <SystemInit>:
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <SystemInit+0x28>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <SystemInit+0x28>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <SystemInit+0x28>)
 800298e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <Reset_Handler>:
 80029a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029dc <LoopFillZerobss+0x14>
 80029a8:	2100      	movs	r1, #0
 80029aa:	e003      	b.n	80029b4 <LoopCopyDataInit>

080029ac <CopyDataInit>:
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <LoopFillZerobss+0x18>)
 80029ae:	585b      	ldr	r3, [r3, r1]
 80029b0:	5043      	str	r3, [r0, r1]
 80029b2:	3104      	adds	r1, #4

080029b4 <LoopCopyDataInit>:
 80029b4:	480b      	ldr	r0, [pc, #44]	; (80029e4 <LoopFillZerobss+0x1c>)
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <LoopFillZerobss+0x20>)
 80029b8:	1842      	adds	r2, r0, r1
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d3f6      	bcc.n	80029ac <CopyDataInit>
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <LoopFillZerobss+0x24>)
 80029c0:	e002      	b.n	80029c8 <LoopFillZerobss>

080029c2 <FillZerobss>:
 80029c2:	2300      	movs	r3, #0
 80029c4:	f842 3b04 	str.w	r3, [r2], #4

080029c8 <LoopFillZerobss>:
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <LoopFillZerobss+0x28>)
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d3f9      	bcc.n	80029c2 <FillZerobss>
 80029ce:	f7ff ffd3 	bl	8002978 <SystemInit>
 80029d2:	f002 ff17 	bl	8005804 <__libc_init_array>
 80029d6:	f7fd fdb3 	bl	8000540 <main>
 80029da:	4770      	bx	lr
 80029dc:	20020000 	.word	0x20020000
 80029e0:	08005d40 	.word	0x08005d40
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000074 	.word	0x20000074
 80029ec:	20000074 	.word	0x20000074
 80029f0:	20000b00 	.word	0x20000b00

080029f4 <ADC_IRQHandler>:
 80029f4:	e7fe      	b.n	80029f4 <ADC_IRQHandler>
	...

080029f8 <HAL_Init>:
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_Init+0x40>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <HAL_Init+0x40>)
 8002a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_Init+0x40>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <HAL_Init+0x40>)
 8002a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_Init+0x40>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <HAL_Init+0x40>)
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	2003      	movs	r0, #3
 8002a22:	f000 f92b 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>
 8002a26:	2000      	movs	r0, #0
 8002a28:	f000 f808 	bl	8002a3c <HAL_InitTick>
 8002a2c:	f7ff fdbe 	bl	80025ac <HAL_MspInit>
 8002a30:	2300      	movs	r3, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023c00 	.word	0x40023c00

08002a3c <HAL_InitTick>:
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_InitTick+0x54>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_InitTick+0x58>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f943 	bl	8002ce6 <HAL_SYSTICK_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_InitTick+0x2e>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00e      	b.n	8002a88 <HAL_InitTick+0x4c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d80a      	bhi.n	8002a86 <HAL_InitTick+0x4a>
 8002a70:	2200      	movs	r2, #0
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	f000 f90b 	bl	8002c92 <HAL_NVIC_SetPriority>
 8002a7c:	4a06      	ldr	r2, [pc, #24]	; (8002a98 <HAL_InitTick+0x5c>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_InitTick+0x4c>
 8002a86:	2301      	movs	r3, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000008 	.word	0x20000008
 8002a98:	20000004 	.word	0x20000004

08002a9c <HAL_IncTick>:
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_IncTick+0x20>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_IncTick+0x24>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_IncTick+0x24>)
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000008 	.word	0x20000008
 8002ac0:	20000af8 	.word	0x20000af8

08002ac4 <HAL_GetTick>:
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_GetTick+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000af8 	.word	0x20000af8

08002adc <__NVIC_SetPriorityGrouping>:
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af8:	4013      	ands	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	021a      	lsls	r2, r3, #8
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	60d3      	str	r3, [r2, #12]
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_GetPriorityGrouping>:
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <__NVIC_GetPriorityGrouping+0x18>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_EnableIRQ>:
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db0b      	blt.n	8002b6a <__NVIC_EnableIRQ+0x2a>
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4907      	ldr	r1, [pc, #28]	; (8002b78 <__NVIC_EnableIRQ+0x38>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2001      	movs	r0, #1
 8002b62:	fa00 f202 	lsl.w	r2, r0, r2
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100

08002b7c <__NVIC_SetPriority>:
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db0a      	blt.n	8002ba6 <__NVIC_SetPriority+0x2a>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	490c      	ldr	r1, [pc, #48]	; (8002bc8 <__NVIC_SetPriority+0x4c>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002ba4:	e00a      	b.n	8002bbc <__NVIC_SetPriority+0x40>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4908      	ldr	r1, [pc, #32]	; (8002bcc <__NVIC_SetPriority+0x50>)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	3b04      	subs	r3, #4
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	440b      	add	r3, r1
 8002bba:	761a      	strb	r2, [r3, #24]
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <NVIC_EncodePriority>:
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	; 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f1c3 0307 	rsb	r3, r3, #7
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	bf28      	it	cs
 8002bee:	2304      	movcs	r3, #4
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d902      	bls.n	8002c00 <NVIC_EncodePriority+0x30>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3b03      	subs	r3, #3
 8002bfe:	e000      	b.n	8002c02 <NVIC_EncodePriority+0x32>
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	401a      	ands	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	409a      	lsls	r2, r3
 8002c18:	f04f 31ff 	mov.w	r1, #4294967295
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43d9      	mvns	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	400b      	ands	r3, r1
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3724      	adds	r7, #36	; 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <SysTick_Config>:
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c48:	d301      	bcc.n	8002c4e <SysTick_Config+0x16>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00f      	b.n	8002c6e <SysTick_Config+0x36>
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <SysTick_Config+0x40>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
 8002c56:	210f      	movs	r1, #15
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f7ff ff8e 	bl	8002b7c <__NVIC_SetPriority>
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SysTick_Config+0x40>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <SysTick_Config+0x40>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <HAL_NVIC_SetPriorityGrouping>:
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff29 	bl	8002adc <__NVIC_SetPriorityGrouping>
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_SetPriority>:
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	f7ff ff3e 	bl	8002b24 <__NVIC_GetPriorityGrouping>
 8002ca8:	6178      	str	r0, [r7, #20]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff ff8e 	bl	8002bd0 <NVIC_EncodePriority>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff5d 	bl	8002b7c <__NVIC_SetPriority>
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_NVIC_EnableIRQ>:
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	71fb      	strb	r3, [r7, #7]
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff31 	bl	8002b40 <__NVIC_EnableIRQ>
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_SYSTICK_Config>:
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ffa2 	bl	8002c38 <SysTick_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_DMA_Start_IT>:
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75fb      	strb	r3, [r7, #23]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_DMA_Start_IT+0x26>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e040      	b.n	8002da6 <HAL_DMA_Start_IT+0xa8>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d12f      	bne.n	8002d98 <HAL_DMA_Start_IT+0x9a>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f850 	bl	8002df2 <DMA_SetConfig>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	223f      	movs	r2, #63	; 0x3f
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0216 	orr.w	r2, r2, #22
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_DMA_Start_IT+0x88>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0208 	orr.w	r2, r2, #8
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e005      	b.n	8002da4 <HAL_DMA_Start_IT+0xa6>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002da0:	2302      	movs	r3, #2
 8002da2:	75fb      	strb	r3, [r7, #23]
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_DMA_Abort_IT>:
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d004      	beq.n	8002dcc <HAL_DMA_Abort_IT+0x1e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e00c      	b.n	8002de6 <HAL_DMA_Abort_IT+0x38>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2205      	movs	r2, #5
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	2300      	movs	r3, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <DMA_SetConfig>:
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d108      	bne.n	8002e32 <DMA_SetConfig+0x40>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	60da      	str	r2, [r3, #12]
 8002e30:	e007      	b.n	8002e42 <DMA_SetConfig+0x50>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_GPIO_Init>:
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e159      	b.n	8003120 <HAL_GPIO_Init+0x2d0>
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 8148 	bne.w	800311a <HAL_GPIO_Init+0x2ca>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d00b      	beq.n	8002eaa <HAL_GPIO_Init+0x5a>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d007      	beq.n	8002eaa <HAL_GPIO_Init+0x5a>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b11      	cmp	r3, #17
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x5a>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b12      	cmp	r3, #18
 8002ea8:	d130      	bne.n	8002f0c <HAL_GPIO_Init+0xbc>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 0201 	and.w	r2, r3, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	60da      	str	r2, [r3, #12]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0xfc>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b12      	cmp	r3, #18
 8002f4a:	d123      	bne.n	8002f94 <HAL_GPIO_Init+0x144>
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	08da      	lsrs	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0203 	and.w	r2, r3, #3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a2 	beq.w	800311a <HAL_GPIO_Init+0x2ca>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b56      	ldr	r3, [pc, #344]	; (8003134 <HAL_GPIO_Init+0x2e4>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4a55      	ldr	r2, [pc, #340]	; (8003134 <HAL_GPIO_Init+0x2e4>)
 8002fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe6:	4b53      	ldr	r3, [pc, #332]	; (8003134 <HAL_GPIO_Init+0x2e4>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a51      	ldr	r2, [pc, #324]	; (8003138 <HAL_GPIO_Init+0x2e8>)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a48      	ldr	r2, [pc, #288]	; (800313c <HAL_GPIO_Init+0x2ec>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d019      	beq.n	8003052 <HAL_GPIO_Init+0x202>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a47      	ldr	r2, [pc, #284]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0x1fe>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a46      	ldr	r2, [pc, #280]	; (8003144 <HAL_GPIO_Init+0x2f4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00d      	beq.n	800304a <HAL_GPIO_Init+0x1fa>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a45      	ldr	r2, [pc, #276]	; (8003148 <HAL_GPIO_Init+0x2f8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <HAL_GPIO_Init+0x1f6>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a44      	ldr	r2, [pc, #272]	; (800314c <HAL_GPIO_Init+0x2fc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_GPIO_Init+0x1f2>
 800303e:	2304      	movs	r3, #4
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x204>
 8003042:	2307      	movs	r3, #7
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x204>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x204>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x204>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x204>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	4934      	ldr	r1, [pc, #208]	; (8003138 <HAL_GPIO_Init+0x2e8>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003072:	4b37      	ldr	r3, [pc, #220]	; (8003150 <HAL_GPIO_Init+0x300>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x246>
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	4a2e      	ldr	r2, [pc, #184]	; (8003150 <HAL_GPIO_Init+0x300>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <HAL_GPIO_Init+0x300>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x270>
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	4a23      	ldr	r2, [pc, #140]	; (8003150 <HAL_GPIO_Init+0x300>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	6053      	str	r3, [r2, #4]
 80030c6:	4b22      	ldr	r3, [pc, #136]	; (8003150 <HAL_GPIO_Init+0x300>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x29a>
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	4a19      	ldr	r2, [pc, #100]	; (8003150 <HAL_GPIO_Init+0x300>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6093      	str	r3, [r2, #8]
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_GPIO_Init+0x300>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2c4>
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_GPIO_Init+0x300>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	60d3      	str	r3, [r2, #12]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f aea2 	bls.w	8002e6c <HAL_GPIO_Init+0x1c>
 8003128:	bf00      	nop
 800312a:	3724      	adds	r7, #36	; 0x24
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	40023800 	.word	0x40023800
 8003138:	40013800 	.word	0x40013800
 800313c:	40020000 	.word	0x40020000
 8003140:	40020400 	.word	0x40020400
 8003144:	40020800 	.word	0x40020800
 8003148:	40020c00 	.word	0x40020c00
 800314c:	40021000 	.word	0x40021000
 8003150:	40013c00 	.word	0x40013c00

08003154 <HAL_GPIO_WritePin>:
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
 8003164:	787b      	ldrb	r3, [r7, #1]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_WritePin+0x1e>
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]
 8003170:	e003      	b.n	800317a <HAL_GPIO_WritePin+0x26>
 8003172:	887b      	ldrh	r3, [r7, #2]
 8003174:	041a      	lsls	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	619a      	str	r2, [r3, #24]
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_GPIO_EXTI_IRQHandler>:
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	80fb      	strh	r3, [r7, #6]
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <HAL_GPIO_EXTI_IRQHandler+0x24>
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	6153      	str	r3, [r2, #20]
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f806 	bl	80031b8 <HAL_GPIO_EXTI_Callback>
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40013c00 	.word	0x40013c00

080031b8 <HAL_GPIO_EXTI_Callback>:
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	80fb      	strh	r3, [r7, #6]
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_RCC_OscConfig>:
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12>
 80031de:	2301      	movs	r3, #1
 80031e0:	e25b      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d075      	beq.n	80032da <HAL_RCC_OscConfig+0x10a>
 80031ee:	4ba3      	ldr	r3, [pc, #652]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00c      	beq.n	8003214 <HAL_RCC_OscConfig+0x44>
 80031fa:	4ba0      	ldr	r3, [pc, #640]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	d112      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
 8003206:	4b9d      	ldr	r3, [pc, #628]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003212:	d10b      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
 8003214:	4b99      	ldr	r3, [pc, #612]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d05b      	beq.n	80032d8 <HAL_RCC_OscConfig+0x108>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d157      	bne.n	80032d8 <HAL_RCC_OscConfig+0x108>
 8003228:	2301      	movs	r3, #1
 800322a:	e236      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003234:	d106      	bne.n	8003244 <HAL_RCC_OscConfig+0x74>
 8003236:	4b91      	ldr	r3, [pc, #580]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a90      	ldr	r2, [pc, #576]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e01d      	b.n	8003280 <HAL_RCC_OscConfig+0xb0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x98>
 800324e:	4b8b      	ldr	r3, [pc, #556]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a8a      	ldr	r2, [pc, #552]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b88      	ldr	r3, [pc, #544]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a87      	ldr	r2, [pc, #540]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0xb0>
 8003268:	4b84      	ldr	r3, [pc, #528]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a83      	ldr	r2, [pc, #524]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b81      	ldr	r3, [pc, #516]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a80      	ldr	r2, [pc, #512]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe0>
 8003288:	f7ff fc1c 	bl	8002ac4 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xd2>
 8003290:	f7ff fc18 	bl	8002ac4 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xd2>
 800329e:	2303      	movs	r3, #3
 80032a0:	e1fb      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 80032a2:	4b76      	ldr	r3, [pc, #472]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0xc0>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x10a>
 80032b0:	f7ff fc08 	bl	8002ac4 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xfa>
 80032b8:	f7ff fc04 	bl	8002ac4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xfa>
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1e7      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 80032ca:	4b6c      	ldr	r3, [pc, #432]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0xe8>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x10a>
 80032d8:	bf00      	nop
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_OscConfig+0x1de>
 80032e6:	4b65      	ldr	r3, [pc, #404]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_RCC_OscConfig+0x13a>
 80032f2:	4b62      	ldr	r3, [pc, #392]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11c      	bne.n	8003338 <HAL_RCC_OscConfig+0x168>
 80032fe:	4b5f      	ldr	r3, [pc, #380]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <HAL_RCC_OscConfig+0x168>
 800330a:	4b5c      	ldr	r3, [pc, #368]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x152>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x152>
 800331e:	2301      	movs	r3, #1
 8003320:	e1bb      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 8003322:	4b56      	ldr	r3, [pc, #344]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4952      	ldr	r1, [pc, #328]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
 8003336:	e03a      	b.n	80033ae <HAL_RCC_OscConfig+0x1de>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_OscConfig+0x1b2>
 8003340:	4b4f      	ldr	r3, [pc, #316]	; (8003480 <HAL_RCC_OscConfig+0x2b0>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f7ff fbbd 	bl	8002ac4 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x190>
 800334e:	f7ff fbb9 	bl	8002ac4 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x190>
 800335c:	2303      	movs	r3, #3
 800335e:	e19c      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 8003360:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x17e>
 800336c:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4940      	ldr	r1, [pc, #256]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x1de>
 8003382:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <HAL_RCC_OscConfig+0x2b0>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f7ff fb9c 	bl	8002ac4 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1d2>
 8003390:	f7ff fb98 	bl	8002ac4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1d2>
 800339e:	2303      	movs	r3, #3
 80033a0:	e17b      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 80033a2:	4b36      	ldr	r3, [pc, #216]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x1c0>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d030      	beq.n	800341c <HAL_RCC_OscConfig+0x24c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d016      	beq.n	80033f0 <HAL_RCC_OscConfig+0x220>
 80033c2:	4b30      	ldr	r3, [pc, #192]	; (8003484 <HAL_RCC_OscConfig+0x2b4>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	f7ff fb7c 	bl	8002ac4 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
 80033d0:	f7ff fb78 	bl	8002ac4 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x212>
 80033de:	2303      	movs	r3, #3
 80033e0:	e15b      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x200>
 80033ee:	e015      	b.n	800341c <HAL_RCC_OscConfig+0x24c>
 80033f0:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCC_OscConfig+0x2b4>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f7ff fb65 	bl	8002ac4 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x240>
 80033fe:	f7ff fb61 	bl	8002ac4 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x240>
 800340c:	2303      	movs	r3, #3
 800340e:	e144      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x22e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80a0 	beq.w	800356a <HAL_RCC_OscConfig+0x39a>
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_RCC_OscConfig+0x28a>
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b0c      	ldr	r3, [pc, #48]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_OscConfig+0x2b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d121      	bne.n	80034aa <HAL_RCC_OscConfig+0x2da>
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_RCC_OscConfig+0x2b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a07      	ldr	r2, [pc, #28]	; (8003488 <HAL_RCC_OscConfig+0x2b8>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	f7ff fb27 	bl	8002ac4 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]
 8003478:	e011      	b.n	800349e <HAL_RCC_OscConfig+0x2ce>
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	42470000 	.word	0x42470000
 8003484:	42470e80 	.word	0x42470e80
 8003488:	40007000 	.word	0x40007000
 800348c:	f7ff fb1a 	bl	8002ac4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x2ce>
 800349a:	2303      	movs	r3, #3
 800349c:	e0fd      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 800349e:	4b81      	ldr	r3, [pc, #516]	; (80036a4 <HAL_RCC_OscConfig+0x4d4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x2bc>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d106      	bne.n	80034c0 <HAL_RCC_OscConfig+0x2f0>
 80034b2:	4b7d      	ldr	r3, [pc, #500]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a7c      	ldr	r2, [pc, #496]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	e01c      	b.n	80034fa <HAL_RCC_OscConfig+0x32a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x312>
 80034c8:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a76      	ldr	r2, [pc, #472]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	4b74      	ldr	r3, [pc, #464]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a73      	ldr	r2, [pc, #460]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	e00b      	b.n	80034fa <HAL_RCC_OscConfig+0x32a>
 80034e2:	4b71      	ldr	r3, [pc, #452]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	4a70      	ldr	r2, [pc, #448]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6713      	str	r3, [r2, #112]	; 0x70
 80034ee:	4b6e      	ldr	r3, [pc, #440]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a6d      	ldr	r2, [pc, #436]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034f4:	f023 0304 	bic.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCC_OscConfig+0x35e>
 8003502:	f7ff fadf 	bl	8002ac4 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x350>
 800350a:	f7ff fadb 	bl	8002ac4 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x350>
 800351c:	2303      	movs	r3, #3
 800351e:	e0bc      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 8003520:	4b61      	ldr	r3, [pc, #388]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ee      	beq.n	800350a <HAL_RCC_OscConfig+0x33a>
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x388>
 800352e:	f7ff fac9 	bl	8002ac4 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x37c>
 8003536:	f7ff fac5 	bl	8002ac4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x37c>
 8003548:	2303      	movs	r3, #3
 800354a:	e0a6      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 800354c:	4b56      	ldr	r3, [pc, #344]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x366>
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <HAL_RCC_OscConfig+0x39a>
 800355e:	4b52      	ldr	r3, [pc, #328]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a51      	ldr	r2, [pc, #324]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8092 	beq.w	8003698 <HAL_RCC_OscConfig+0x4c8>
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d05c      	beq.n	800363a <HAL_RCC_OscConfig+0x46a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d141      	bne.n	800360c <HAL_RCC_OscConfig+0x43c>
 8003588:	4b48      	ldr	r3, [pc, #288]	; (80036ac <HAL_RCC_OscConfig+0x4dc>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f7ff fa99 	bl	8002ac4 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x3d8>
 8003596:	f7ff fa95 	bl	8002ac4 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x3d8>
 80035a4:	2303      	movs	r3, #3
 80035a6:	e078      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 80035a8:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x3c6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	019b      	lsls	r3, r3, #6
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	3b01      	subs	r3, #1
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	061b      	lsls	r3, r3, #24
 80035d8:	4933      	ldr	r1, [pc, #204]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
 80035de:	4b33      	ldr	r3, [pc, #204]	; (80036ac <HAL_RCC_OscConfig+0x4dc>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f7ff fa6e 	bl	8002ac4 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x42e>
 80035ec:	f7ff fa6a 	bl	8002ac4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x42e>
 80035fa:	2303      	movs	r3, #3
 80035fc:	e04d      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x41c>
 800360a:	e045      	b.n	8003698 <HAL_RCC_OscConfig+0x4c8>
 800360c:	4b27      	ldr	r3, [pc, #156]	; (80036ac <HAL_RCC_OscConfig+0x4dc>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	f7ff fa57 	bl	8002ac4 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x45c>
 800361a:	f7ff fa53 	bl	8002ac4 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x45c>
 8003628:	2303      	movs	r3, #3
 800362a:	e036      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x44a>
 8003638:	e02e      	b.n	8003698 <HAL_RCC_OscConfig+0x4c8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_RCC_OscConfig+0x476>
 8003642:	2301      	movs	r3, #1
 8003644:	e029      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	429a      	cmp	r2, r3
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x4c4>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	429a      	cmp	r2, r3
 8003666:	d115      	bne.n	8003694 <HAL_RCC_OscConfig+0x4c4>
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003674:	4293      	cmp	r3, r2
 8003676:	d10d      	bne.n	8003694 <HAL_RCC_OscConfig+0x4c4>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	429a      	cmp	r2, r3
 8003684:	d106      	bne.n	8003694 <HAL_RCC_OscConfig+0x4c4>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x4c8>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
 8003698:	2300      	movs	r3, #0
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40007000 	.word	0x40007000
 80036a8:	40023800 	.word	0x40023800
 80036ac:	42470060 	.word	0x42470060

080036b0 <HAL_RCC_ClockConfig>:
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0cc      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
 80036c4:	4b68      	ldr	r3, [pc, #416]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d90c      	bls.n	80036ec <HAL_RCC_ClockConfig+0x3c>
 80036d2:	4b65      	ldr	r3, [pc, #404]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	4b63      	ldr	r3, [pc, #396]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x3c>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0b8      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d020      	beq.n	800373a <HAL_RCC_ClockConfig+0x8a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x60>
 8003704:	4b59      	ldr	r3, [pc, #356]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a58      	ldr	r2, [pc, #352]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800370e:	6093      	str	r3, [r2, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x78>
 800371c:	4b53      	ldr	r3, [pc, #332]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a52      	ldr	r2, [pc, #328]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003726:	6093      	str	r3, [r2, #8]
 8003728:	4b50      	ldr	r3, [pc, #320]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	494d      	ldr	r1, [pc, #308]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d044      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x120>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xae>
 800374e:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d119      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
 800375a:	2301      	movs	r3, #1
 800375c:	e07f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d003      	beq.n	800376e <HAL_RCC_ClockConfig+0xbe>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xce>
 800376e:	4b3f      	ldr	r3, [pc, #252]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
 800377a:	2301      	movs	r3, #1
 800377c:	e06f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
 800378a:	2301      	movs	r3, #1
 800378c:	e067      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
 800378e:	4b37      	ldr	r3, [pc, #220]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4934      	ldr	r1, [pc, #208]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]
 80037a0:	f7ff f990 	bl	8002ac4 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x10e>
 80037a8:	f7ff f98c 	bl	8002ac4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x10e>
 80037ba:	2303      	movs	r3, #3
 80037bc:	e04f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
 80037be:	4b2b      	ldr	r3, [pc, #172]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xf8>
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d20c      	bcs.n	80037f8 <HAL_RCC_ClockConfig+0x148>
 80037de:	4b22      	ldr	r3, [pc, #136]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x148>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e032      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCC_ClockConfig+0x166>
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4916      	ldr	r1, [pc, #88]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCC_ClockConfig+0x186>
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	490e      	ldr	r1, [pc, #56]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
 8003836:	f000 f821 	bl	800387c <HAL_RCC_GetSysClockFreq>
 800383a:	4601      	mov	r1, r0
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	5cd3      	ldrb	r3, [r2, r3]
 800384a:	fa21 f303 	lsr.w	r3, r1, r3
 800384e:	4a09      	ldr	r2, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_ClockConfig+0x1c8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff f8f0 	bl	8002a3c <HAL_InitTick>
 800385c:	2300      	movs	r3, #0
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023c00 	.word	0x40023c00
 800386c:	40023800 	.word	0x40023800
 8003870:	08005d14 	.word	0x08005d14
 8003874:	20000000 	.word	0x20000000
 8003878:	20000004 	.word	0x20000004

0800387c <HAL_RCC_GetSysClockFreq>:
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	2300      	movs	r3, #0
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d007      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x32>
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d008      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x38>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 80b4 	bne.w	8003a10 <HAL_RCC_GetSysClockFreq+0x194>
 80038a8:	4b5e      	ldr	r3, [pc, #376]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	e0b3      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x19a>
 80038ae:	4b5e      	ldr	r3, [pc, #376]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	e0b0      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x19a>
 80038b4:	4b5a      	ldr	r3, [pc, #360]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	4b58      	ldr	r3, [pc, #352]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04a      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0xe4>
 80038ca:	4b55      	ldr	r3, [pc, #340]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	f04f 0400 	mov.w	r4, #0
 80038d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	ea03 0501 	and.w	r5, r3, r1
 80038e0:	ea04 0602 	and.w	r6, r4, r2
 80038e4:	4629      	mov	r1, r5
 80038e6:	4632      	mov	r2, r6
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	f04f 0400 	mov.w	r4, #0
 80038f0:	0154      	lsls	r4, r2, #5
 80038f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038f6:	014b      	lsls	r3, r1, #5
 80038f8:	4619      	mov	r1, r3
 80038fa:	4622      	mov	r2, r4
 80038fc:	1b49      	subs	r1, r1, r5
 80038fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	f04f 0400 	mov.w	r4, #0
 800390a:	0194      	lsls	r4, r2, #6
 800390c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003910:	018b      	lsls	r3, r1, #6
 8003912:	1a5b      	subs	r3, r3, r1
 8003914:	eb64 0402 	sbc.w	r4, r4, r2
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	00e2      	lsls	r2, r4, #3
 8003922:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003926:	00d9      	lsls	r1, r3, #3
 8003928:	460b      	mov	r3, r1
 800392a:	4614      	mov	r4, r2
 800392c:	195b      	adds	r3, r3, r5
 800392e:	eb44 0406 	adc.w	r4, r4, r6
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	0262      	lsls	r2, r4, #9
 800393c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003940:	0259      	lsls	r1, r3, #9
 8003942:	460b      	mov	r3, r1
 8003944:	4614      	mov	r4, r2
 8003946:	4618      	mov	r0, r3
 8003948:	4621      	mov	r1, r4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f04f 0400 	mov.w	r4, #0
 8003950:	461a      	mov	r2, r3
 8003952:	4623      	mov	r3, r4
 8003954:	f7fc fc48 	bl	80001e8 <__aeabi_uldivmod>
 8003958:	4603      	mov	r3, r0
 800395a:	460c      	mov	r4, r1
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e049      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x178>
 8003960:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	f04f 0400 	mov.w	r4, #0
 800396a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	ea03 0501 	and.w	r5, r3, r1
 8003976:	ea04 0602 	and.w	r6, r4, r2
 800397a:	4629      	mov	r1, r5
 800397c:	4632      	mov	r2, r6
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	f04f 0400 	mov.w	r4, #0
 8003986:	0154      	lsls	r4, r2, #5
 8003988:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800398c:	014b      	lsls	r3, r1, #5
 800398e:	4619      	mov	r1, r3
 8003990:	4622      	mov	r2, r4
 8003992:	1b49      	subs	r1, r1, r5
 8003994:	eb62 0206 	sbc.w	r2, r2, r6
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	f04f 0400 	mov.w	r4, #0
 80039a0:	0194      	lsls	r4, r2, #6
 80039a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039a6:	018b      	lsls	r3, r1, #6
 80039a8:	1a5b      	subs	r3, r3, r1
 80039aa:	eb64 0402 	sbc.w	r4, r4, r2
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	00e2      	lsls	r2, r4, #3
 80039b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039bc:	00d9      	lsls	r1, r3, #3
 80039be:	460b      	mov	r3, r1
 80039c0:	4614      	mov	r4, r2
 80039c2:	195b      	adds	r3, r3, r5
 80039c4:	eb44 0406 	adc.w	r4, r4, r6
 80039c8:	f04f 0100 	mov.w	r1, #0
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	02a2      	lsls	r2, r4, #10
 80039d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039d6:	0299      	lsls	r1, r3, #10
 80039d8:	460b      	mov	r3, r1
 80039da:	4614      	mov	r4, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	4621      	mov	r1, r4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	461a      	mov	r2, r3
 80039e8:	4623      	mov	r3, r4
 80039ea:	f7fc fbfd 	bl	80001e8 <__aeabi_uldivmod>
 80039ee:	4603      	mov	r3, r0
 80039f0:	460c      	mov	r4, r1
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x19a>
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	bf00      	nop
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a20:	40023800 	.word	0x40023800
 8003a24:	00f42400 	.word	0x00f42400
 8003a28:	007a1200 	.word	0x007a1200

08003a2c <HAL_RCC_GetHCLKFreq>:
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000000 	.word	0x20000000

08003a44 <HAL_RCC_GetPCLK1Freq>:
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	f7ff fff0 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a4c:	4601      	mov	r1, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0a9b      	lsrs	r3, r3, #10
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4a03      	ldr	r2, [pc, #12]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5a:	5cd3      	ldrb	r3, [r2, r3]
 8003a5c:	fa21 f303 	lsr.w	r3, r1, r3
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	08005d24 	.word	0x08005d24

08003a6c <HAL_RCC_GetPCLK2Freq>:
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	f7ff ffdc 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a74:	4601      	mov	r1, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0b5b      	lsrs	r3, r3, #13
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4a03      	ldr	r2, [pc, #12]	; (8003a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	fa21 f303 	lsr.w	r3, r1, r3
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	08005d24 	.word	0x08005d24

08003a94 <HAL_TIM_Base_Init>:
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_Base_Init+0x12>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e01d      	b.n	8003ae2 <HAL_TIM_Base_Init+0x4e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_TIM_Base_Init+0x2c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe fd9e 	bl	80025fc <HAL_TIM_Base_MspInit>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 fb7e 	bl	80041d4 <TIM_Base_SetConfig>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_TIM_PWM_Init>:
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_TIM_PWM_Init+0x12>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e01d      	b.n	8003b38 <HAL_TIM_PWM_Init+0x4e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <HAL_TIM_PWM_Init+0x2c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fe fde3 	bl	80026dc <HAL_TIM_PWM_MspInit>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3304      	adds	r3, #4
 8003b26:	4619      	mov	r1, r3
 8003b28:	4610      	mov	r0, r2
 8003b2a:	f000 fb53 	bl	80041d4 <TIM_Base_SetConfig>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b36:	2300      	movs	r3, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_Encoder_Init>:
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIM_Encoder_Init+0x14>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e083      	b.n	8003c5c <HAL_TIM_Encoder_Init+0x11c>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <HAL_TIM_Encoder_Init+0x2e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7fe fd6f 	bl	800264c <HAL_TIM_Encoder_MspInit>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b84:	f023 0307 	bic.w	r3, r3, #7
 8003b88:	6093      	str	r3, [r2, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f000 fb1d 	bl	80041d4 <TIM_Base_SetConfig>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003be0:	f023 030c 	bic.w	r3, r3, #12
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	011a      	lsls	r2, r3, #4
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	031b      	lsls	r3, r3, #12
 8003c10:	4313      	orrs	r3, r2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	4313      	orrs	r3, r2
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	619a      	str	r2, [r3, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_IRQHandler>:
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x5c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x5c>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0202 	mvn.w	r2, #2
 8003c90:	611a      	str	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	771a      	strb	r2, [r3, #28]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0x4a>
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa75 	bl	8004196 <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0x56>
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa67 	bl	8004182 <HAL_TIM_OC_DelayElapsedCallback>
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fa78 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0xb0>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0xb0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0204 	mvn.w	r2, #4
 8003ce4:	611a      	str	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	771a      	strb	r2, [r3, #28]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x9e>
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fa4b 	bl	8004196 <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0xaa>
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fa3d 	bl	8004182 <HAL_TIM_OC_DelayElapsedCallback>
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fa4e 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d122      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x104>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d11b      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x104>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0208 	mvn.w	r2, #8
 8003d38:	611a      	str	r2, [r3, #16]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	771a      	strb	r2, [r3, #28]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_TIM_IRQHandler+0xf2>
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fa21 	bl	8004196 <HAL_TIM_IC_CaptureCallback>
 8003d54:	e005      	b.n	8003d62 <HAL_TIM_IRQHandler+0xfe>
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa13 	bl	8004182 <HAL_TIM_OC_DelayElapsedCallback>
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fa24 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x158>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x158>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0210 	mvn.w	r2, #16
 8003d8c:	611a      	str	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2208      	movs	r2, #8
 8003d92:	771a      	strb	r2, [r3, #28]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x146>
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f9f7 	bl	8004196 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0x152>
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f9e9 	bl	8004182 <HAL_TIM_OC_DelayElapsedCallback>
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f9fa 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x184>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x184>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0201 	mvn.w	r2, #1
 8003de0:	611a      	str	r2, [r3, #16]
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f9c3 	bl	800416e <HAL_TIM_PeriodElapsedCallback>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b80      	cmp	r3, #128	; 0x80
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1b0>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e00:	2b80      	cmp	r3, #128	; 0x80
 8003e02:	d107      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1b0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fcfe 	bl	8004810 <HAL_TIMEx_BreakCallback>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x1dc>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x1dc>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e38:	611a      	str	r2, [r3, #16]
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9bf 	bl	80041be <HAL_TIM_TriggerCallback>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d10e      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x208>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d107      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x208>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0220 	mvn.w	r2, #32
 8003e64:	611a      	str	r2, [r3, #16]
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fcc8 	bl	80047fc <HAL_TIMEx_CommutCallback>
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_PWM_ConfigChannel>:
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e0b4      	b.n	8003ff8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b0c      	cmp	r3, #12
 8003ea2:	f200 809f 	bhi.w	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003ea6:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003ee1 	.word	0x08003ee1
 8003eb0:	08003fe5 	.word	0x08003fe5
 8003eb4:	08003fe5 	.word	0x08003fe5
 8003eb8:	08003fe5 	.word	0x08003fe5
 8003ebc:	08003f21 	.word	0x08003f21
 8003ec0:	08003fe5 	.word	0x08003fe5
 8003ec4:	08003fe5 	.word	0x08003fe5
 8003ec8:	08003fe5 	.word	0x08003fe5
 8003ecc:	08003f63 	.word	0x08003f63
 8003ed0:	08003fe5 	.word	0x08003fe5
 8003ed4:	08003fe5 	.word	0x08003fe5
 8003ed8:	08003fe5 	.word	0x08003fe5
 8003edc:	08003fa3 	.word	0x08003fa3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f9f4 	bl	80042d4 <TIM_OC1_SetConfig>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0208 	orr.w	r2, r2, #8
 8003efa:	619a      	str	r2, [r3, #24]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0204 	bic.w	r2, r2, #4
 8003f0a:	619a      	str	r2, [r3, #24]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6999      	ldr	r1, [r3, #24]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	619a      	str	r2, [r3, #24]
 8003f1e:	e062      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fa3a 	bl	80043a0 <TIM_OC2_SetConfig>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f3a:	619a      	str	r2, [r3, #24]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4a:	619a      	str	r2, [r3, #24]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6999      	ldr	r1, [r3, #24]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	619a      	str	r2, [r3, #24]
 8003f60:	e041      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fa85 	bl	8004478 <TIM_OC3_SetConfig>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0208 	orr.w	r2, r2, #8
 8003f7c:	61da      	str	r2, [r3, #28]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0204 	bic.w	r2, r2, #4
 8003f8c:	61da      	str	r2, [r3, #28]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69d9      	ldr	r1, [r3, #28]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	61da      	str	r2, [r3, #28]
 8003fa0:	e021      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 facf 	bl	800454c <TIM_OC4_SetConfig>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fbc:	61da      	str	r2, [r3, #28]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69da      	ldr	r2, [r3, #28]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fcc:	61da      	str	r2, [r3, #28]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69d9      	ldr	r1, [r3, #28]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	021a      	lsls	r2, r3, #8
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	61da      	str	r2, [r3, #28]
 8003fe2:	e000      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003fe4:	bf00      	nop
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_TIM_ConfigClockSource>:
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_TIM_ConfigClockSource+0x18>
 8004014:	2302      	movs	r3, #2
 8004016:	e0a6      	b.n	8004166 <HAL_TIM_ConfigClockSource+0x166>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d067      	beq.n	8004120 <HAL_TIM_ConfigClockSource+0x120>
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d80b      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x6c>
 8004054:	2b10      	cmp	r3, #16
 8004056:	d073      	beq.n	8004140 <HAL_TIM_ConfigClockSource+0x140>
 8004058:	2b10      	cmp	r3, #16
 800405a:	d802      	bhi.n	8004062 <HAL_TIM_ConfigClockSource+0x62>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d06f      	beq.n	8004140 <HAL_TIM_ConfigClockSource+0x140>
 8004060:	e078      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x154>
 8004062:	2b20      	cmp	r3, #32
 8004064:	d06c      	beq.n	8004140 <HAL_TIM_ConfigClockSource+0x140>
 8004066:	2b30      	cmp	r3, #48	; 0x30
 8004068:	d06a      	beq.n	8004140 <HAL_TIM_ConfigClockSource+0x140>
 800406a:	e073      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x154>
 800406c:	2b70      	cmp	r3, #112	; 0x70
 800406e:	d00d      	beq.n	800408c <HAL_TIM_ConfigClockSource+0x8c>
 8004070:	2b70      	cmp	r3, #112	; 0x70
 8004072:	d804      	bhi.n	800407e <HAL_TIM_ConfigClockSource+0x7e>
 8004074:	2b50      	cmp	r3, #80	; 0x50
 8004076:	d033      	beq.n	80040e0 <HAL_TIM_ConfigClockSource+0xe0>
 8004078:	2b60      	cmp	r3, #96	; 0x60
 800407a:	d041      	beq.n	8004100 <HAL_TIM_ConfigClockSource+0x100>
 800407c:	e06a      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x154>
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004082:	d066      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x152>
 8004084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004088:	d017      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0xba>
 800408a:	e063      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x154>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6899      	ldr	r1, [r3, #8]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f000 fb20 	bl	80046e0 <TIM_ETR_SetConfig>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	e04c      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x154>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6899      	ldr	r1, [r3, #8]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f000 fb09 	bl	80046e0 <TIM_ETR_SetConfig>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	e039      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x154>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	461a      	mov	r2, r3
 80040ee:	f000 fa7d 	bl	80045ec <TIM_TI1_ConfigInputStage>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2150      	movs	r1, #80	; 0x50
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fad6 	bl	80046aa <TIM_ITRx_SetConfig>
 80040fe:	e029      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x154>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	461a      	mov	r2, r3
 800410e:	f000 fa9c 	bl	800464a <TIM_TI2_ConfigInputStage>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2160      	movs	r1, #96	; 0x60
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fac6 	bl	80046aa <TIM_ITRx_SetConfig>
 800411e:	e019      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x154>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	461a      	mov	r2, r3
 800412e:	f000 fa5d 	bl	80045ec <TIM_TI1_ConfigInputStage>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2140      	movs	r1, #64	; 0x40
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fab6 	bl	80046aa <TIM_ITRx_SetConfig>
 800413e:	e009      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x154>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f000 faad 	bl	80046aa <TIM_ITRx_SetConfig>
 8004150:	e000      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x154>
 8004152:	bf00      	nop
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004164:	2300      	movs	r3, #0
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_TIM_PeriodElapsedCallback>:
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_TIM_OC_DelayElapsedCallback>:
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_TIM_IC_CaptureCallback>:
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_PWM_PulseFinishedCallback>:
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_TIM_TriggerCallback>:
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <TIM_Base_SetConfig>:
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a34      	ldr	r2, [pc, #208]	; (80042b8 <TIM_Base_SetConfig+0xe4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00f      	beq.n	800420c <TIM_Base_SetConfig+0x38>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f2:	d00b      	beq.n	800420c <TIM_Base_SetConfig+0x38>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a31      	ldr	r2, [pc, #196]	; (80042bc <TIM_Base_SetConfig+0xe8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <TIM_Base_SetConfig+0x38>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a30      	ldr	r2, [pc, #192]	; (80042c0 <TIM_Base_SetConfig+0xec>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_Base_SetConfig+0x38>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a2f      	ldr	r2, [pc, #188]	; (80042c4 <TIM_Base_SetConfig+0xf0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d108      	bne.n	800421e <TIM_Base_SetConfig+0x4a>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a25      	ldr	r2, [pc, #148]	; (80042b8 <TIM_Base_SetConfig+0xe4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01b      	beq.n	800425e <TIM_Base_SetConfig+0x8a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422c:	d017      	beq.n	800425e <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a22      	ldr	r2, [pc, #136]	; (80042bc <TIM_Base_SetConfig+0xe8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <TIM_Base_SetConfig+0xec>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00f      	beq.n	800425e <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a20      	ldr	r2, [pc, #128]	; (80042c4 <TIM_Base_SetConfig+0xf0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00b      	beq.n	800425e <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1f      	ldr	r2, [pc, #124]	; (80042c8 <TIM_Base_SetConfig+0xf4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <TIM_Base_SetConfig+0xf8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_Base_SetConfig+0x8a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <TIM_Base_SetConfig+0xfc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d108      	bne.n	8004270 <TIM_Base_SetConfig+0x9c>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <TIM_Base_SetConfig+0xe4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d103      	bne.n	80042a4 <TIM_Base_SetConfig+0xd0>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	615a      	str	r2, [r3, #20]
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800
 80042c4:	40000c00 	.word	0x40000c00
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800

080042d4 <TIM_OC1_SetConfig>:
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0201 	bic.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f023 0302 	bic.w	r3, r3, #2
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a1c      	ldr	r2, [pc, #112]	; (800439c <TIM_OC1_SetConfig+0xc8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10c      	bne.n	800434a <TIM_OC1_SetConfig+0x76>
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0308 	bic.w	r3, r3, #8
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 0304 	bic.w	r3, r3, #4
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a13      	ldr	r2, [pc, #76]	; (800439c <TIM_OC1_SetConfig+0xc8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d111      	bne.n	8004376 <TIM_OC1_SetConfig+0xa2>
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	619a      	str	r2, [r3, #24]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	635a      	str	r2, [r3, #52]	; 0x34
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	621a      	str	r2, [r3, #32]
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40010000 	.word	0x40010000

080043a0 <TIM_OC2_SetConfig>:
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0210 	bic.w	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	621a      	str	r2, [r3, #32]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f023 0320 	bic.w	r3, r3, #32
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a1e      	ldr	r2, [pc, #120]	; (8004474 <TIM_OC2_SetConfig+0xd4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10d      	bne.n	800441c <TIM_OC2_SetConfig+0x7c>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a15      	ldr	r2, [pc, #84]	; (8004474 <TIM_OC2_SetConfig+0xd4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d113      	bne.n	800444c <TIM_OC2_SetConfig+0xac>
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	619a      	str	r2, [r3, #24]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	621a      	str	r2, [r3, #32]
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40010000 	.word	0x40010000

08004478 <TIM_OC3_SetConfig>:
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	621a      	str	r2, [r3, #32]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0303 	bic.w	r3, r3, #3
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <TIM_OC3_SetConfig+0xd0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10d      	bne.n	80044f2 <TIM_OC3_SetConfig+0x7a>
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a14      	ldr	r2, [pc, #80]	; (8004548 <TIM_OC3_SetConfig+0xd0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d113      	bne.n	8004522 <TIM_OC3_SetConfig+0xaa>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	61da      	str	r2, [r3, #28]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	63da      	str	r2, [r3, #60]	; 0x3c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	621a      	str	r2, [r3, #32]
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40010000 	.word	0x40010000

0800454c <TIM_OC4_SetConfig>:
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	621a      	str	r2, [r3, #32]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	031b      	lsls	r3, r3, #12
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <TIM_OC4_SetConfig+0x9c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d109      	bne.n	80045c0 <TIM_OC4_SetConfig+0x74>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	61da      	str	r2, [r3, #28]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	621a      	str	r2, [r3, #32]
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000

080045ec <TIM_TI1_ConfigInputStage>:
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 030a 	bic.w	r3, r3, #10
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	619a      	str	r2, [r3, #24]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	621a      	str	r2, [r3, #32]
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <TIM_TI2_ConfigInputStage>:
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0210 	bic.w	r2, r3, #16
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	621a      	str	r2, [r3, #32]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	031b      	lsls	r3, r3, #12
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	619a      	str	r2, [r3, #24]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	621a      	str	r2, [r3, #32]
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <TIM_ITRx_SetConfig>:
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f043 0307 	orr.w	r3, r3, #7
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <TIM_ETR_SetConfig>:
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	021a      	lsls	r2, r3, #8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	431a      	orrs	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4313      	orrs	r3, r2
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	bf00      	nop
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIMEx_MasterConfigSynchronization>:
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004734:	2302      	movs	r3, #2
 8004736:	e050      	b.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1c      	ldr	r2, [pc, #112]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d018      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004784:	d013      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a18      	ldr	r2, [pc, #96]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d10c      	bne.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047d8:	2300      	movs	r3, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40010000 	.word	0x40010000
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40014000 	.word	0x40014000

080047fc <HAL_TIMEx_CommutCallback>:
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIMEx_BreakCallback>:
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_UART_Init>:
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_UART_Init+0x12>
 8004832:	2301      	movs	r3, #1
 8004834:	e03f      	b.n	80048b6 <HAL_UART_Init+0x92>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_UART_Init+0x2c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd ffa2 	bl	8002794 <HAL_UART_MspInit>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2224      	movs	r2, #36	; 0x24
 8004854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004866:	60da      	str	r2, [r3, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fc2d 	bl	80050c8 <UART_SetConfig>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800487c:	611a      	str	r2, [r3, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800488c:	615a      	str	r2, [r3, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80048b4:	2300      	movs	r3, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <HAL_UART_Transmit_DMA>:
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d153      	bne.n	8004982 <HAL_UART_Transmit_DMA+0xc2>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_UART_Transmit_DMA+0x26>
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Transmit_DMA+0x2a>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e04c      	b.n	8004984 <HAL_UART_Transmit_DMA+0xc4>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_UART_Transmit_DMA+0x38>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e045      	b.n	8004984 <HAL_UART_Transmit_DMA+0xc4>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	621a      	str	r2, [r3, #32]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	849a      	strh	r2, [r3, #36]	; 0x24
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	84da      	strh	r2, [r3, #38]	; 0x26
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2221      	movs	r2, #33	; 0x21
 800491c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	4a19      	ldr	r2, [pc, #100]	; (800498c <HAL_UART_Transmit_DMA+0xcc>)
 8004926:	63da      	str	r2, [r3, #60]	; 0x3c
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	4a18      	ldr	r2, [pc, #96]	; (8004990 <HAL_UART_Transmit_DMA+0xd0>)
 800492e:	641a      	str	r2, [r3, #64]	; 0x40
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	4a17      	ldr	r2, [pc, #92]	; (8004994 <HAL_UART_Transmit_DMA+0xd4>)
 8004936:	64da      	str	r2, [r3, #76]	; 0x4c
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	2200      	movs	r2, #0
 800493e:	651a      	str	r2, [r3, #80]	; 0x50
 8004940:	f107 0308 	add.w	r3, r7, #8
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	6819      	ldr	r1, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3304      	adds	r3, #4
 8004954:	461a      	mov	r2, r3
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	f7fe f9d1 	bl	8002cfe <HAL_DMA_Start_IT>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800497c:	615a      	str	r2, [r3, #20]
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_UART_Transmit_DMA+0xc4>
 8004982:	2302      	movs	r3, #2
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	08004cd5 	.word	0x08004cd5
 8004990:	08004d27 	.word	0x08004d27
 8004994:	08004dc7 	.word	0x08004dc7

08004998 <HAL_UART_Receive_DMA>:
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d166      	bne.n	8004a80 <HAL_UART_Receive_DMA+0xe8>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <HAL_UART_Receive_DMA+0x26>
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Receive_DMA+0x2a>
 80049be:	2301      	movs	r3, #1
 80049c0:	e05f      	b.n	8004a82 <HAL_UART_Receive_DMA+0xea>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_UART_Receive_DMA+0x38>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e058      	b.n	8004a82 <HAL_UART_Receive_DMA+0xea>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	629a      	str	r2, [r3, #40]	; 0x28
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	859a      	strh	r2, [r3, #44]	; 0x2c
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2222      	movs	r2, #34	; 0x22
 80049ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f6:	4a25      	ldr	r2, [pc, #148]	; (8004a8c <HAL_UART_Receive_DMA+0xf4>)
 80049f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	4a24      	ldr	r2, [pc, #144]	; (8004a90 <HAL_UART_Receive_DMA+0xf8>)
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a06:	4a23      	ldr	r2, [pc, #140]	; (8004a94 <HAL_UART_Receive_DMA+0xfc>)
 8004a08:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0e:	2200      	movs	r2, #0
 8004a10:	651a      	str	r2, [r3, #80]	; 0x50
 8004a12:	f107 0308 	add.w	r3, r7, #8
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	f7fe f968 	bl	8002cfe <HAL_DMA_Start_IT>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a5a:	60da      	str	r2, [r3, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	615a      	str	r2, [r3, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a7a:	615a      	str	r2, [r3, #20]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e000      	b.n	8004a82 <HAL_UART_Receive_DMA+0xea>
 8004a80:	2302      	movs	r3, #2
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	08004d43 	.word	0x08004d43
 8004a90:	08004dab 	.word	0x08004dab
 8004a94:	08004dc7 	.word	0x08004dc7

08004a98 <HAL_UART_IRQHandler>:
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <HAL_UART_IRQHandler+0x52>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_UART_IRQHandler+0x52>
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_UART_IRQHandler+0x52>
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa6f 	bl	8004fc6 <UART_Receive_IT>
 8004ae8:	e0d1      	b.n	8004c8e <HAL_UART_IRQHandler+0x1f6>
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80b0 	beq.w	8004c52 <HAL_UART_IRQHandler+0x1ba>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <HAL_UART_IRQHandler+0x70>
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80a5 	beq.w	8004c52 <HAL_UART_IRQHandler+0x1ba>
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_UART_IRQHandler+0x90>
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_UART_IRQHandler+0x90>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	f043 0201 	orr.w	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_UART_IRQHandler+0xb0>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_UART_IRQHandler+0xb0>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	f043 0202 	orr.w	r2, r3, #2
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_UART_IRQHandler+0xd0>
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_UART_IRQHandler+0xd0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	f043 0204 	orr.w	r2, r3, #4
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00f      	beq.n	8004b92 <HAL_UART_IRQHandler+0xfa>
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d104      	bne.n	8004b86 <HAL_UART_IRQHandler+0xee>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_UART_IRQHandler+0xfa>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	f043 0208 	orr.w	r2, r3, #8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d078      	beq.n	8004c8c <HAL_UART_IRQHandler+0x1f4>
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x11c>
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x11c>
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa09 	bl	8004fc6 <UART_Receive_IT>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	bf0c      	ite	eq
 8004bc2:	2301      	moveq	r3, #1
 8004bc4:	2300      	movne	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <HAL_UART_IRQHandler+0x144>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d031      	beq.n	8004c40 <HAL_UART_IRQHandler+0x1a8>
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f952 	bl	8004e86 <UART_EndRxTransfer>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d123      	bne.n	8004c38 <HAL_UART_IRQHandler+0x1a0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfe:	615a      	str	r2, [r3, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d013      	beq.n	8004c30 <HAL_UART_IRQHandler+0x198>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0c:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <HAL_UART_IRQHandler+0x1fc>)
 8004c0e:	651a      	str	r2, [r3, #80]	; 0x50
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe f8ca 	bl	8002dae <HAL_DMA_Abort_IT>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d016      	beq.n	8004c4e <HAL_UART_IRQHandler+0x1b6>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4798      	blx	r3
 8004c2e:	e00e      	b.n	8004c4e <HAL_UART_IRQHandler+0x1b6>
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f845 	bl	8004cc0 <HAL_UART_ErrorCallback>
 8004c36:	e00a      	b.n	8004c4e <HAL_UART_IRQHandler+0x1b6>
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f841 	bl	8004cc0 <HAL_UART_ErrorCallback>
 8004c3e:	e006      	b.n	8004c4e <HAL_UART_IRQHandler+0x1b6>
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f83d 	bl	8004cc0 <HAL_UART_ErrorCallback>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c4c:	e01e      	b.n	8004c8c <HAL_UART_IRQHandler+0x1f4>
 8004c4e:	bf00      	nop
 8004c50:	e01c      	b.n	8004c8c <HAL_UART_IRQHandler+0x1f4>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_UART_IRQHandler+0x1d6>
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_UART_IRQHandler+0x1d6>
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f93f 	bl	8004eea <UART_Transmit_IT>
 8004c6c:	e00f      	b.n	8004c8e <HAL_UART_IRQHandler+0x1f6>
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_UART_IRQHandler+0x1f6>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_UART_IRQHandler+0x1f6>
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f987 	bl	8004f96 <UART_EndTransmit_IT>
 8004c88:	bf00      	nop
 8004c8a:	e000      	b.n	8004c8e <HAL_UART_IRQHandler+0x1f6>
 8004c8c:	bf00      	nop
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	08004ec3 	.word	0x08004ec3

08004c98 <HAL_UART_TxHalfCpltCallback>:
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_UART_RxHalfCpltCallback>:
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_UART_ErrorCallback>:
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <UART_DMATransmitCplt>:
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d113      	bne.n	8004d18 <UART_DMATransmitCplt+0x44>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	84da      	strh	r2, [r3, #38]	; 0x26
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695a      	ldr	r2, [r3, #20]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d04:	615a      	str	r2, [r3, #20]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	e002      	b.n	8004d1e <UART_DMATransmitCplt+0x4a>
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7fc fe89 	bl	8001a30 <HAL_UART_TxCpltCallback>
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <UART_DMATxHalfCplt>:
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff ffaf 	bl	8004c98 <HAL_UART_TxHalfCpltCallback>
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <UART_DMAReceiveCplt>:
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d11e      	bne.n	8004d9c <UART_DMAReceiveCplt+0x5a>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d72:	60da      	str	r2, [r3, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	615a      	str	r2, [r3, #20]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d92:	615a      	str	r2, [r3, #20]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7fc fe59 	bl	8001a54 <HAL_UART_RxCpltCallback>
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <UART_DMARxHalfCplt>:
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7ff ff77 	bl	8004cac <HAL_UART_RxHalfCpltCallback>
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <UART_DMAError>:
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de2:	2b80      	cmp	r3, #128	; 0x80
 8004de4:	bf0c      	ite	eq
 8004de6:	2301      	moveq	r3, #1
 8004de8:	2300      	movne	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b21      	cmp	r3, #33	; 0x21
 8004df8:	d108      	bne.n	8004e0c <UART_DMAError+0x46>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <UART_DMAError+0x46>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	84da      	strh	r2, [r3, #38]	; 0x26
 8004e06:	68b8      	ldr	r0, [r7, #8]
 8004e08:	f000 f827 	bl	8004e5a <UART_EndTxTransfer>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b22      	cmp	r3, #34	; 0x22
 8004e2c:	d108      	bne.n	8004e40 <UART_DMAError+0x7a>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <UART_DMAError+0x7a>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2200      	movs	r2, #0
 8004e38:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004e3a:	68b8      	ldr	r0, [r7, #8]
 8004e3c:	f000 f823 	bl	8004e86 <UART_EndRxTransfer>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	f043 0210 	orr.w	r2, r3, #16
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e4c:	68b8      	ldr	r0, [r7, #8]
 8004e4e:	f7ff ff37 	bl	8004cc0 <HAL_UART_ErrorCallback>
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <UART_EndTxTransfer>:
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <UART_EndRxTransfer>:
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	615a      	str	r2, [r3, #20]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <UART_DMAAbortOnError>:
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	84da      	strh	r2, [r3, #38]	; 0x26
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff feef 	bl	8004cc0 <HAL_UART_ErrorCallback>
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <UART_Transmit_IT>:
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b21      	cmp	r3, #33	; 0x21
 8004efc:	d144      	bne.n	8004f88 <UART_Transmit_IT+0x9e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f06:	d11a      	bne.n	8004f3e <UART_Transmit_IT+0x54>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f1c:	605a      	str	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d105      	bne.n	8004f32 <UART_Transmit_IT+0x48>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	1c9a      	adds	r2, r3, #2
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]
 8004f30:	e00e      	b.n	8004f50 <UART_Transmit_IT+0x66>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]
 8004f3c:	e008      	b.n	8004f50 <UART_Transmit_IT+0x66>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	1c59      	adds	r1, r3, #1
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6211      	str	r1, [r2, #32]
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10f      	bne.n	8004f84 <UART_Transmit_IT+0x9a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f72:	60da      	str	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f82:	60da      	str	r2, [r3, #12]
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <UART_Transmit_IT+0xa0>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <UART_EndTransmit_IT>:
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc fd3a 	bl	8001a30 <HAL_UART_TxCpltCallback>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <UART_Receive_IT>:
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b22      	cmp	r3, #34	; 0x22
 8004fd8:	d171      	bne.n	80050be <UART_Receive_IT+0xf8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe2:	d123      	bne.n	800502c <UART_Receive_IT+0x66>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10e      	bne.n	8005010 <UART_Receive_IT+0x4a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	1c9a      	adds	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	629a      	str	r2, [r3, #40]	; 0x28
 800500e:	e029      	b.n	8005064 <UART_Receive_IT+0x9e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	b29b      	uxth	r3, r3
 8005018:	b2db      	uxtb	r3, r3
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	801a      	strh	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	629a      	str	r2, [r3, #40]	; 0x28
 800502a:	e01b      	b.n	8005064 <UART_Receive_IT+0x9e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <UART_Receive_IT+0x84>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6858      	ldr	r0, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	1c59      	adds	r1, r3, #1
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6291      	str	r1, [r2, #40]	; 0x28
 8005044:	b2c2      	uxtb	r2, r0
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	e00c      	b.n	8005064 <UART_Receive_IT+0x9e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	1c58      	adds	r0, r3, #1
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	6288      	str	r0, [r1, #40]	; 0x28
 800505c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29b      	uxth	r3, r3
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4619      	mov	r1, r3
 8005072:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005074:	2b00      	cmp	r3, #0
 8005076:	d120      	bne.n	80050ba <UART_Receive_IT+0xf4>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0220 	bic.w	r2, r2, #32
 8005086:	60da      	str	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005096:	60da      	str	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	615a      	str	r2, [r3, #20]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fc fccf 	bl	8001a54 <HAL_UART_RxCpltCallback>
 80050b6:	2300      	movs	r3, #0
 80050b8:	e002      	b.n	80050c0 <UART_Receive_IT+0xfa>
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <UART_Receive_IT+0xfa>
 80050be:	2302      	movs	r3, #2
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <UART_SetConfig>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	611a      	str	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800510a:	f023 030c 	bic.w	r3, r3, #12
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	68f9      	ldr	r1, [r7, #12]
 8005114:	430b      	orrs	r3, r1
 8005116:	60d3      	str	r3, [r2, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	615a      	str	r2, [r3, #20]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005136:	f040 818b 	bne.w	8005450 <UART_SetConfig+0x388>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4ac1      	ldr	r2, [pc, #772]	; (8005444 <UART_SetConfig+0x37c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d005      	beq.n	8005150 <UART_SetConfig+0x88>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4abf      	ldr	r2, [pc, #764]	; (8005448 <UART_SetConfig+0x380>)
 800514a:	4293      	cmp	r3, r2
 800514c:	f040 80bd 	bne.w	80052ca <UART_SetConfig+0x202>
 8005150:	f7fe fc8c 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8005154:	60b8      	str	r0, [r7, #8]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	461d      	mov	r5, r3
 800515a:	f04f 0600 	mov.w	r6, #0
 800515e:	46a8      	mov	r8, r5
 8005160:	46b1      	mov	r9, r6
 8005162:	eb18 0308 	adds.w	r3, r8, r8
 8005166:	eb49 0409 	adc.w	r4, r9, r9
 800516a:	4698      	mov	r8, r3
 800516c:	46a1      	mov	r9, r4
 800516e:	eb18 0805 	adds.w	r8, r8, r5
 8005172:	eb49 0906 	adc.w	r9, r9, r6
 8005176:	f04f 0100 	mov.w	r1, #0
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005182:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005186:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800518a:	4688      	mov	r8, r1
 800518c:	4691      	mov	r9, r2
 800518e:	eb18 0005 	adds.w	r0, r8, r5
 8005192:	eb49 0106 	adc.w	r1, r9, r6
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	461d      	mov	r5, r3
 800519c:	f04f 0600 	mov.w	r6, #0
 80051a0:	196b      	adds	r3, r5, r5
 80051a2:	eb46 0406 	adc.w	r4, r6, r6
 80051a6:	461a      	mov	r2, r3
 80051a8:	4623      	mov	r3, r4
 80051aa:	f7fb f81d 	bl	80001e8 <__aeabi_uldivmod>
 80051ae:	4603      	mov	r3, r0
 80051b0:	460c      	mov	r4, r1
 80051b2:	461a      	mov	r2, r3
 80051b4:	4ba5      	ldr	r3, [pc, #660]	; (800544c <UART_SetConfig+0x384>)
 80051b6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	461d      	mov	r5, r3
 80051c4:	f04f 0600 	mov.w	r6, #0
 80051c8:	46a9      	mov	r9, r5
 80051ca:	46b2      	mov	sl, r6
 80051cc:	eb19 0309 	adds.w	r3, r9, r9
 80051d0:	eb4a 040a 	adc.w	r4, sl, sl
 80051d4:	4699      	mov	r9, r3
 80051d6:	46a2      	mov	sl, r4
 80051d8:	eb19 0905 	adds.w	r9, r9, r5
 80051dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051f4:	4689      	mov	r9, r1
 80051f6:	4692      	mov	sl, r2
 80051f8:	eb19 0005 	adds.w	r0, r9, r5
 80051fc:	eb4a 0106 	adc.w	r1, sl, r6
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	461d      	mov	r5, r3
 8005206:	f04f 0600 	mov.w	r6, #0
 800520a:	196b      	adds	r3, r5, r5
 800520c:	eb46 0406 	adc.w	r4, r6, r6
 8005210:	461a      	mov	r2, r3
 8005212:	4623      	mov	r3, r4
 8005214:	f7fa ffe8 	bl	80001e8 <__aeabi_uldivmod>
 8005218:	4603      	mov	r3, r0
 800521a:	460c      	mov	r4, r1
 800521c:	461a      	mov	r2, r3
 800521e:	4b8b      	ldr	r3, [pc, #556]	; (800544c <UART_SetConfig+0x384>)
 8005220:	fba3 1302 	umull	r1, r3, r3, r2
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	2164      	movs	r1, #100	; 0x64
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	3332      	adds	r3, #50	; 0x32
 8005232:	4a86      	ldr	r2, [pc, #536]	; (800544c <UART_SetConfig+0x384>)
 8005234:	fba2 2303 	umull	r2, r3, r2, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005240:	4498      	add	r8, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	461d      	mov	r5, r3
 8005246:	f04f 0600 	mov.w	r6, #0
 800524a:	46a9      	mov	r9, r5
 800524c:	46b2      	mov	sl, r6
 800524e:	eb19 0309 	adds.w	r3, r9, r9
 8005252:	eb4a 040a 	adc.w	r4, sl, sl
 8005256:	4699      	mov	r9, r3
 8005258:	46a2      	mov	sl, r4
 800525a:	eb19 0905 	adds.w	r9, r9, r5
 800525e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005262:	f04f 0100 	mov.w	r1, #0
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800526e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005276:	4689      	mov	r9, r1
 8005278:	4692      	mov	sl, r2
 800527a:	eb19 0005 	adds.w	r0, r9, r5
 800527e:	eb4a 0106 	adc.w	r1, sl, r6
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	461d      	mov	r5, r3
 8005288:	f04f 0600 	mov.w	r6, #0
 800528c:	196b      	adds	r3, r5, r5
 800528e:	eb46 0406 	adc.w	r4, r6, r6
 8005292:	461a      	mov	r2, r3
 8005294:	4623      	mov	r3, r4
 8005296:	f7fa ffa7 	bl	80001e8 <__aeabi_uldivmod>
 800529a:	4603      	mov	r3, r0
 800529c:	460c      	mov	r4, r1
 800529e:	461a      	mov	r2, r3
 80052a0:	4b6a      	ldr	r3, [pc, #424]	; (800544c <UART_SetConfig+0x384>)
 80052a2:	fba3 1302 	umull	r1, r3, r3, r2
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	2164      	movs	r1, #100	; 0x64
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	3332      	adds	r3, #50	; 0x32
 80052b4:	4a65      	ldr	r2, [pc, #404]	; (800544c <UART_SetConfig+0x384>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f003 0207 	and.w	r2, r3, #7
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4442      	add	r2, r8
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	e26f      	b.n	80057aa <UART_SetConfig+0x6e2>
 80052ca:	f7fe fbbb 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 80052ce:	60b8      	str	r0, [r7, #8]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	461d      	mov	r5, r3
 80052d4:	f04f 0600 	mov.w	r6, #0
 80052d8:	46a8      	mov	r8, r5
 80052da:	46b1      	mov	r9, r6
 80052dc:	eb18 0308 	adds.w	r3, r8, r8
 80052e0:	eb49 0409 	adc.w	r4, r9, r9
 80052e4:	4698      	mov	r8, r3
 80052e6:	46a1      	mov	r9, r4
 80052e8:	eb18 0805 	adds.w	r8, r8, r5
 80052ec:	eb49 0906 	adc.w	r9, r9, r6
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005300:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005304:	4688      	mov	r8, r1
 8005306:	4691      	mov	r9, r2
 8005308:	eb18 0005 	adds.w	r0, r8, r5
 800530c:	eb49 0106 	adc.w	r1, r9, r6
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	461d      	mov	r5, r3
 8005316:	f04f 0600 	mov.w	r6, #0
 800531a:	196b      	adds	r3, r5, r5
 800531c:	eb46 0406 	adc.w	r4, r6, r6
 8005320:	461a      	mov	r2, r3
 8005322:	4623      	mov	r3, r4
 8005324:	f7fa ff60 	bl	80001e8 <__aeabi_uldivmod>
 8005328:	4603      	mov	r3, r0
 800532a:	460c      	mov	r4, r1
 800532c:	461a      	mov	r2, r3
 800532e:	4b47      	ldr	r3, [pc, #284]	; (800544c <UART_SetConfig+0x384>)
 8005330:	fba3 2302 	umull	r2, r3, r3, r2
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	461d      	mov	r5, r3
 800533e:	f04f 0600 	mov.w	r6, #0
 8005342:	46a9      	mov	r9, r5
 8005344:	46b2      	mov	sl, r6
 8005346:	eb19 0309 	adds.w	r3, r9, r9
 800534a:	eb4a 040a 	adc.w	r4, sl, sl
 800534e:	4699      	mov	r9, r3
 8005350:	46a2      	mov	sl, r4
 8005352:	eb19 0905 	adds.w	r9, r9, r5
 8005356:	eb4a 0a06 	adc.w	sl, sl, r6
 800535a:	f04f 0100 	mov.w	r1, #0
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005366:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800536a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800536e:	4689      	mov	r9, r1
 8005370:	4692      	mov	sl, r2
 8005372:	eb19 0005 	adds.w	r0, r9, r5
 8005376:	eb4a 0106 	adc.w	r1, sl, r6
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	461d      	mov	r5, r3
 8005380:	f04f 0600 	mov.w	r6, #0
 8005384:	196b      	adds	r3, r5, r5
 8005386:	eb46 0406 	adc.w	r4, r6, r6
 800538a:	461a      	mov	r2, r3
 800538c:	4623      	mov	r3, r4
 800538e:	f7fa ff2b 	bl	80001e8 <__aeabi_uldivmod>
 8005392:	4603      	mov	r3, r0
 8005394:	460c      	mov	r4, r1
 8005396:	461a      	mov	r2, r3
 8005398:	4b2c      	ldr	r3, [pc, #176]	; (800544c <UART_SetConfig+0x384>)
 800539a:	fba3 1302 	umull	r1, r3, r3, r2
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	2164      	movs	r1, #100	; 0x64
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	3332      	adds	r3, #50	; 0x32
 80053ac:	4a27      	ldr	r2, [pc, #156]	; (800544c <UART_SetConfig+0x384>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053ba:	4498      	add	r8, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	461d      	mov	r5, r3
 80053c0:	f04f 0600 	mov.w	r6, #0
 80053c4:	46a9      	mov	r9, r5
 80053c6:	46b2      	mov	sl, r6
 80053c8:	eb19 0309 	adds.w	r3, r9, r9
 80053cc:	eb4a 040a 	adc.w	r4, sl, sl
 80053d0:	4699      	mov	r9, r3
 80053d2:	46a2      	mov	sl, r4
 80053d4:	eb19 0905 	adds.w	r9, r9, r5
 80053d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80053dc:	f04f 0100 	mov.w	r1, #0
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053f0:	4689      	mov	r9, r1
 80053f2:	4692      	mov	sl, r2
 80053f4:	eb19 0005 	adds.w	r0, r9, r5
 80053f8:	eb4a 0106 	adc.w	r1, sl, r6
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	461d      	mov	r5, r3
 8005402:	f04f 0600 	mov.w	r6, #0
 8005406:	196b      	adds	r3, r5, r5
 8005408:	eb46 0406 	adc.w	r4, r6, r6
 800540c:	461a      	mov	r2, r3
 800540e:	4623      	mov	r3, r4
 8005410:	f7fa feea 	bl	80001e8 <__aeabi_uldivmod>
 8005414:	4603      	mov	r3, r0
 8005416:	460c      	mov	r4, r1
 8005418:	461a      	mov	r2, r3
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <UART_SetConfig+0x384>)
 800541c:	fba3 1302 	umull	r1, r3, r3, r2
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	2164      	movs	r1, #100	; 0x64
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	3332      	adds	r3, #50	; 0x32
 800542e:	4a07      	ldr	r2, [pc, #28]	; (800544c <UART_SetConfig+0x384>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	f003 0207 	and.w	r2, r3, #7
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4442      	add	r2, r8
 8005440:	609a      	str	r2, [r3, #8]
 8005442:	e1b2      	b.n	80057aa <UART_SetConfig+0x6e2>
 8005444:	40011000 	.word	0x40011000
 8005448:	40011400 	.word	0x40011400
 800544c:	51eb851f 	.word	0x51eb851f
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4ad7      	ldr	r2, [pc, #860]	; (80057b4 <UART_SetConfig+0x6ec>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d005      	beq.n	8005466 <UART_SetConfig+0x39e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4ad6      	ldr	r2, [pc, #856]	; (80057b8 <UART_SetConfig+0x6f0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	f040 80d1 	bne.w	8005608 <UART_SetConfig+0x540>
 8005466:	f7fe fb01 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 800546a:	60b8      	str	r0, [r7, #8]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	469a      	mov	sl, r3
 8005470:	f04f 0b00 	mov.w	fp, #0
 8005474:	46d0      	mov	r8, sl
 8005476:	46d9      	mov	r9, fp
 8005478:	eb18 0308 	adds.w	r3, r8, r8
 800547c:	eb49 0409 	adc.w	r4, r9, r9
 8005480:	4698      	mov	r8, r3
 8005482:	46a1      	mov	r9, r4
 8005484:	eb18 080a 	adds.w	r8, r8, sl
 8005488:	eb49 090b 	adc.w	r9, r9, fp
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005498:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800549c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054a0:	4688      	mov	r8, r1
 80054a2:	4691      	mov	r9, r2
 80054a4:	eb1a 0508 	adds.w	r5, sl, r8
 80054a8:	eb4b 0609 	adc.w	r6, fp, r9
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	4619      	mov	r1, r3
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	f04f 0400 	mov.w	r4, #0
 80054be:	0094      	lsls	r4, r2, #2
 80054c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054c4:	008b      	lsls	r3, r1, #2
 80054c6:	461a      	mov	r2, r3
 80054c8:	4623      	mov	r3, r4
 80054ca:	4628      	mov	r0, r5
 80054cc:	4631      	mov	r1, r6
 80054ce:	f7fa fe8b 	bl	80001e8 <__aeabi_uldivmod>
 80054d2:	4603      	mov	r3, r0
 80054d4:	460c      	mov	r4, r1
 80054d6:	461a      	mov	r2, r3
 80054d8:	4bb8      	ldr	r3, [pc, #736]	; (80057bc <UART_SetConfig+0x6f4>)
 80054da:	fba3 2302 	umull	r2, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	469b      	mov	fp, r3
 80054e8:	f04f 0c00 	mov.w	ip, #0
 80054ec:	46d9      	mov	r9, fp
 80054ee:	46e2      	mov	sl, ip
 80054f0:	eb19 0309 	adds.w	r3, r9, r9
 80054f4:	eb4a 040a 	adc.w	r4, sl, sl
 80054f8:	4699      	mov	r9, r3
 80054fa:	46a2      	mov	sl, r4
 80054fc:	eb19 090b 	adds.w	r9, r9, fp
 8005500:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005504:	f04f 0100 	mov.w	r1, #0
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005510:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005514:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005518:	4689      	mov	r9, r1
 800551a:	4692      	mov	sl, r2
 800551c:	eb1b 0509 	adds.w	r5, fp, r9
 8005520:	eb4c 060a 	adc.w	r6, ip, sl
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4619      	mov	r1, r3
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	f04f 0400 	mov.w	r4, #0
 8005536:	0094      	lsls	r4, r2, #2
 8005538:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800553c:	008b      	lsls	r3, r1, #2
 800553e:	461a      	mov	r2, r3
 8005540:	4623      	mov	r3, r4
 8005542:	4628      	mov	r0, r5
 8005544:	4631      	mov	r1, r6
 8005546:	f7fa fe4f 	bl	80001e8 <__aeabi_uldivmod>
 800554a:	4603      	mov	r3, r0
 800554c:	460c      	mov	r4, r1
 800554e:	461a      	mov	r2, r3
 8005550:	4b9a      	ldr	r3, [pc, #616]	; (80057bc <UART_SetConfig+0x6f4>)
 8005552:	fba3 1302 	umull	r1, r3, r3, r2
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2164      	movs	r1, #100	; 0x64
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	3332      	adds	r3, #50	; 0x32
 8005564:	4a95      	ldr	r2, [pc, #596]	; (80057bc <UART_SetConfig+0x6f4>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005570:	4498      	add	r8, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	469b      	mov	fp, r3
 8005576:	f04f 0c00 	mov.w	ip, #0
 800557a:	46d9      	mov	r9, fp
 800557c:	46e2      	mov	sl, ip
 800557e:	eb19 0309 	adds.w	r3, r9, r9
 8005582:	eb4a 040a 	adc.w	r4, sl, sl
 8005586:	4699      	mov	r9, r3
 8005588:	46a2      	mov	sl, r4
 800558a:	eb19 090b 	adds.w	r9, r9, fp
 800558e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005592:	f04f 0100 	mov.w	r1, #0
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800559e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055a6:	4689      	mov	r9, r1
 80055a8:	4692      	mov	sl, r2
 80055aa:	eb1b 0509 	adds.w	r5, fp, r9
 80055ae:	eb4c 060a 	adc.w	r6, ip, sl
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	4619      	mov	r1, r3
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	f04f 0400 	mov.w	r4, #0
 80055c4:	0094      	lsls	r4, r2, #2
 80055c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055ca:	008b      	lsls	r3, r1, #2
 80055cc:	461a      	mov	r2, r3
 80055ce:	4623      	mov	r3, r4
 80055d0:	4628      	mov	r0, r5
 80055d2:	4631      	mov	r1, r6
 80055d4:	f7fa fe08 	bl	80001e8 <__aeabi_uldivmod>
 80055d8:	4603      	mov	r3, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	461a      	mov	r2, r3
 80055de:	4b77      	ldr	r3, [pc, #476]	; (80057bc <UART_SetConfig+0x6f4>)
 80055e0:	fba3 1302 	umull	r1, r3, r3, r2
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	2164      	movs	r1, #100	; 0x64
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	3332      	adds	r3, #50	; 0x32
 80055f2:	4a72      	ldr	r2, [pc, #456]	; (80057bc <UART_SetConfig+0x6f4>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	f003 020f 	and.w	r2, r3, #15
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4442      	add	r2, r8
 8005604:	609a      	str	r2, [r3, #8]
 8005606:	e0d0      	b.n	80057aa <UART_SetConfig+0x6e2>
 8005608:	f7fe fa1c 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 800560c:	60b8      	str	r0, [r7, #8]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	469a      	mov	sl, r3
 8005612:	f04f 0b00 	mov.w	fp, #0
 8005616:	46d0      	mov	r8, sl
 8005618:	46d9      	mov	r9, fp
 800561a:	eb18 0308 	adds.w	r3, r8, r8
 800561e:	eb49 0409 	adc.w	r4, r9, r9
 8005622:	4698      	mov	r8, r3
 8005624:	46a1      	mov	r9, r4
 8005626:	eb18 080a 	adds.w	r8, r8, sl
 800562a:	eb49 090b 	adc.w	r9, r9, fp
 800562e:	f04f 0100 	mov.w	r1, #0
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800563a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800563e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005642:	4688      	mov	r8, r1
 8005644:	4691      	mov	r9, r2
 8005646:	eb1a 0508 	adds.w	r5, sl, r8
 800564a:	eb4b 0609 	adc.w	r6, fp, r9
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4619      	mov	r1, r3
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	f04f 0400 	mov.w	r4, #0
 8005660:	0094      	lsls	r4, r2, #2
 8005662:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005666:	008b      	lsls	r3, r1, #2
 8005668:	461a      	mov	r2, r3
 800566a:	4623      	mov	r3, r4
 800566c:	4628      	mov	r0, r5
 800566e:	4631      	mov	r1, r6
 8005670:	f7fa fdba 	bl	80001e8 <__aeabi_uldivmod>
 8005674:	4603      	mov	r3, r0
 8005676:	460c      	mov	r4, r1
 8005678:	461a      	mov	r2, r3
 800567a:	4b50      	ldr	r3, [pc, #320]	; (80057bc <UART_SetConfig+0x6f4>)
 800567c:	fba3 2302 	umull	r2, r3, r3, r2
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	469b      	mov	fp, r3
 800568a:	f04f 0c00 	mov.w	ip, #0
 800568e:	46d9      	mov	r9, fp
 8005690:	46e2      	mov	sl, ip
 8005692:	eb19 0309 	adds.w	r3, r9, r9
 8005696:	eb4a 040a 	adc.w	r4, sl, sl
 800569a:	4699      	mov	r9, r3
 800569c:	46a2      	mov	sl, r4
 800569e:	eb19 090b 	adds.w	r9, r9, fp
 80056a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056a6:	f04f 0100 	mov.w	r1, #0
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056ba:	4689      	mov	r9, r1
 80056bc:	4692      	mov	sl, r2
 80056be:	eb1b 0509 	adds.w	r5, fp, r9
 80056c2:	eb4c 060a 	adc.w	r6, ip, sl
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	4619      	mov	r1, r3
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	f04f 0400 	mov.w	r4, #0
 80056d8:	0094      	lsls	r4, r2, #2
 80056da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056de:	008b      	lsls	r3, r1, #2
 80056e0:	461a      	mov	r2, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	4631      	mov	r1, r6
 80056e8:	f7fa fd7e 	bl	80001e8 <__aeabi_uldivmod>
 80056ec:	4603      	mov	r3, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	461a      	mov	r2, r3
 80056f2:	4b32      	ldr	r3, [pc, #200]	; (80057bc <UART_SetConfig+0x6f4>)
 80056f4:	fba3 1302 	umull	r1, r3, r3, r2
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	2164      	movs	r1, #100	; 0x64
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	3332      	adds	r3, #50	; 0x32
 8005706:	4a2d      	ldr	r2, [pc, #180]	; (80057bc <UART_SetConfig+0x6f4>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005712:	4498      	add	r8, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	469b      	mov	fp, r3
 8005718:	f04f 0c00 	mov.w	ip, #0
 800571c:	46d9      	mov	r9, fp
 800571e:	46e2      	mov	sl, ip
 8005720:	eb19 0309 	adds.w	r3, r9, r9
 8005724:	eb4a 040a 	adc.w	r4, sl, sl
 8005728:	4699      	mov	r9, r3
 800572a:	46a2      	mov	sl, r4
 800572c:	eb19 090b 	adds.w	r9, r9, fp
 8005730:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005734:	f04f 0100 	mov.w	r1, #0
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005740:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005744:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005748:	4689      	mov	r9, r1
 800574a:	4692      	mov	sl, r2
 800574c:	eb1b 0509 	adds.w	r5, fp, r9
 8005750:	eb4c 060a 	adc.w	r6, ip, sl
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4619      	mov	r1, r3
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	f04f 0400 	mov.w	r4, #0
 8005766:	0094      	lsls	r4, r2, #2
 8005768:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800576c:	008b      	lsls	r3, r1, #2
 800576e:	461a      	mov	r2, r3
 8005770:	4623      	mov	r3, r4
 8005772:	4628      	mov	r0, r5
 8005774:	4631      	mov	r1, r6
 8005776:	f7fa fd37 	bl	80001e8 <__aeabi_uldivmod>
 800577a:	4603      	mov	r3, r0
 800577c:	460c      	mov	r4, r1
 800577e:	461a      	mov	r2, r3
 8005780:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <UART_SetConfig+0x6f4>)
 8005782:	fba3 1302 	umull	r1, r3, r3, r2
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	2164      	movs	r1, #100	; 0x64
 800578a:	fb01 f303 	mul.w	r3, r1, r3
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	3332      	adds	r3, #50	; 0x32
 8005794:	4a09      	ldr	r2, [pc, #36]	; (80057bc <UART_SetConfig+0x6f4>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	f003 020f 	and.w	r2, r3, #15
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4442      	add	r2, r8
 80057a6:	609a      	str	r2, [r3, #8]
 80057a8:	e7ff      	b.n	80057aa <UART_SetConfig+0x6e2>
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b4:	40011000 	.word	0x40011000
 80057b8:	40011400 	.word	0x40011400
 80057bc:	51eb851f 	.word	0x51eb851f

080057c0 <__cxa_pure_virtual>:
 80057c0:	b508      	push	{r3, lr}
 80057c2:	f000 f80d 	bl	80057e0 <_ZSt9terminatev>

080057c6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80057c6:	b508      	push	{r3, lr}
 80057c8:	4780      	blx	r0
 80057ca:	f000 f80e 	bl	80057ea <abort>
	...

080057d0 <_ZSt13get_terminatev>:
 80057d0:	4b02      	ldr	r3, [pc, #8]	; (80057dc <_ZSt13get_terminatev+0xc>)
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	f3bf 8f5b 	dmb	ish
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	2000000c 	.word	0x2000000c

080057e0 <_ZSt9terminatev>:
 80057e0:	b508      	push	{r3, lr}
 80057e2:	f7ff fff5 	bl	80057d0 <_ZSt13get_terminatev>
 80057e6:	f7ff ffee 	bl	80057c6 <_ZN10__cxxabiv111__terminateEPFvvE>

080057ea <abort>:
 80057ea:	b508      	push	{r3, lr}
 80057ec:	2006      	movs	r0, #6
 80057ee:	f000 f871 	bl	80058d4 <raise>
 80057f2:	2001      	movs	r0, #1
 80057f4:	f7fd f880 	bl	80028f8 <_exit>

080057f8 <__errno>:
 80057f8:	4b01      	ldr	r3, [pc, #4]	; (8005800 <__errno+0x8>)
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000010 	.word	0x20000010

08005804 <__libc_init_array>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	4e0d      	ldr	r6, [pc, #52]	; (800583c <__libc_init_array+0x38>)
 8005808:	4c0d      	ldr	r4, [pc, #52]	; (8005840 <__libc_init_array+0x3c>)
 800580a:	1ba4      	subs	r4, r4, r6
 800580c:	10a4      	asrs	r4, r4, #2
 800580e:	2500      	movs	r5, #0
 8005810:	42a5      	cmp	r5, r4
 8005812:	d109      	bne.n	8005828 <__libc_init_array+0x24>
 8005814:	4e0b      	ldr	r6, [pc, #44]	; (8005844 <__libc_init_array+0x40>)
 8005816:	4c0c      	ldr	r4, [pc, #48]	; (8005848 <__libc_init_array+0x44>)
 8005818:	f000 f960 	bl	8005adc <_init>
 800581c:	1ba4      	subs	r4, r4, r6
 800581e:	10a4      	asrs	r4, r4, #2
 8005820:	2500      	movs	r5, #0
 8005822:	42a5      	cmp	r5, r4
 8005824:	d105      	bne.n	8005832 <__libc_init_array+0x2e>
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800582c:	4798      	blx	r3
 800582e:	3501      	adds	r5, #1
 8005830:	e7ee      	b.n	8005810 <__libc_init_array+0xc>
 8005832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005836:	4798      	blx	r3
 8005838:	3501      	adds	r5, #1
 800583a:	e7f2      	b.n	8005822 <__libc_init_array+0x1e>
 800583c:	08005d34 	.word	0x08005d34
 8005840:	08005d34 	.word	0x08005d34
 8005844:	08005d34 	.word	0x08005d34
 8005848:	08005d3c 	.word	0x08005d3c

0800584c <memcpy>:
 800584c:	b510      	push	{r4, lr}
 800584e:	1e43      	subs	r3, r0, #1
 8005850:	440a      	add	r2, r1
 8005852:	4291      	cmp	r1, r2
 8005854:	d100      	bne.n	8005858 <memcpy+0xc>
 8005856:	bd10      	pop	{r4, pc}
 8005858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800585c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005860:	e7f7      	b.n	8005852 <memcpy+0x6>

08005862 <memset>:
 8005862:	4402      	add	r2, r0
 8005864:	4603      	mov	r3, r0
 8005866:	4293      	cmp	r3, r2
 8005868:	d100      	bne.n	800586c <memset+0xa>
 800586a:	4770      	bx	lr
 800586c:	f803 1b01 	strb.w	r1, [r3], #1
 8005870:	e7f9      	b.n	8005866 <memset+0x4>
	...

08005874 <realloc>:
 8005874:	4b02      	ldr	r3, [pc, #8]	; (8005880 <realloc+0xc>)
 8005876:	460a      	mov	r2, r1
 8005878:	4601      	mov	r1, r0
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	f000 b8a0 	b.w	80059c0 <_realloc_r>
 8005880:	20000010 	.word	0x20000010

08005884 <_raise_r>:
 8005884:	291f      	cmp	r1, #31
 8005886:	b538      	push	{r3, r4, r5, lr}
 8005888:	4604      	mov	r4, r0
 800588a:	460d      	mov	r5, r1
 800588c:	d904      	bls.n	8005898 <_raise_r+0x14>
 800588e:	2316      	movs	r3, #22
 8005890:	6003      	str	r3, [r0, #0]
 8005892:	f04f 30ff 	mov.w	r0, #4294967295
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800589a:	b112      	cbz	r2, 80058a2 <_raise_r+0x1e>
 800589c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80058a0:	b94b      	cbnz	r3, 80058b6 <_raise_r+0x32>
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 f830 	bl	8005908 <_getpid_r>
 80058a8:	462a      	mov	r2, r5
 80058aa:	4601      	mov	r1, r0
 80058ac:	4620      	mov	r0, r4
 80058ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058b2:	f000 b817 	b.w	80058e4 <_kill_r>
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d00a      	beq.n	80058d0 <_raise_r+0x4c>
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	d103      	bne.n	80058c6 <_raise_r+0x42>
 80058be:	2316      	movs	r3, #22
 80058c0:	6003      	str	r3, [r0, #0]
 80058c2:	2001      	movs	r0, #1
 80058c4:	e7e7      	b.n	8005896 <_raise_r+0x12>
 80058c6:	2400      	movs	r4, #0
 80058c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058cc:	4628      	mov	r0, r5
 80058ce:	4798      	blx	r3
 80058d0:	2000      	movs	r0, #0
 80058d2:	e7e0      	b.n	8005896 <_raise_r+0x12>

080058d4 <raise>:
 80058d4:	4b02      	ldr	r3, [pc, #8]	; (80058e0 <raise+0xc>)
 80058d6:	4601      	mov	r1, r0
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	f7ff bfd3 	b.w	8005884 <_raise_r>
 80058de:	bf00      	nop
 80058e0:	20000010 	.word	0x20000010

080058e4 <_kill_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4c07      	ldr	r4, [pc, #28]	; (8005904 <_kill_r+0x20>)
 80058e8:	2300      	movs	r3, #0
 80058ea:	4605      	mov	r5, r0
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	f7fc fff1 	bl	80028d8 <_kill>
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	d102      	bne.n	8005900 <_kill_r+0x1c>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	b103      	cbz	r3, 8005900 <_kill_r+0x1c>
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	bd38      	pop	{r3, r4, r5, pc}
 8005902:	bf00      	nop
 8005904:	20000afc 	.word	0x20000afc

08005908 <_getpid_r>:
 8005908:	f7fc bfde 	b.w	80028c8 <_getpid>

0800590c <_malloc_r>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	1ccd      	adds	r5, r1, #3
 8005910:	f025 0503 	bic.w	r5, r5, #3
 8005914:	3508      	adds	r5, #8
 8005916:	2d0c      	cmp	r5, #12
 8005918:	bf38      	it	cc
 800591a:	250c      	movcc	r5, #12
 800591c:	2d00      	cmp	r5, #0
 800591e:	4606      	mov	r6, r0
 8005920:	db01      	blt.n	8005926 <_malloc_r+0x1a>
 8005922:	42a9      	cmp	r1, r5
 8005924:	d903      	bls.n	800592e <_malloc_r+0x22>
 8005926:	230c      	movs	r3, #12
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	2000      	movs	r0, #0
 800592c:	bd70      	pop	{r4, r5, r6, pc}
 800592e:	f000 f87d 	bl	8005a2c <__malloc_lock>
 8005932:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <_malloc_r+0xac>)
 8005934:	6814      	ldr	r4, [r2, #0]
 8005936:	4621      	mov	r1, r4
 8005938:	b991      	cbnz	r1, 8005960 <_malloc_r+0x54>
 800593a:	4c20      	ldr	r4, [pc, #128]	; (80059bc <_malloc_r+0xb0>)
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	b91b      	cbnz	r3, 8005948 <_malloc_r+0x3c>
 8005940:	4630      	mov	r0, r6
 8005942:	f000 f863 	bl	8005a0c <_sbrk_r>
 8005946:	6020      	str	r0, [r4, #0]
 8005948:	4629      	mov	r1, r5
 800594a:	4630      	mov	r0, r6
 800594c:	f000 f85e 	bl	8005a0c <_sbrk_r>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d124      	bne.n	800599e <_malloc_r+0x92>
 8005954:	230c      	movs	r3, #12
 8005956:	6033      	str	r3, [r6, #0]
 8005958:	4630      	mov	r0, r6
 800595a:	f000 f868 	bl	8005a2e <__malloc_unlock>
 800595e:	e7e4      	b.n	800592a <_malloc_r+0x1e>
 8005960:	680b      	ldr	r3, [r1, #0]
 8005962:	1b5b      	subs	r3, r3, r5
 8005964:	d418      	bmi.n	8005998 <_malloc_r+0x8c>
 8005966:	2b0b      	cmp	r3, #11
 8005968:	d90f      	bls.n	800598a <_malloc_r+0x7e>
 800596a:	600b      	str	r3, [r1, #0]
 800596c:	50cd      	str	r5, [r1, r3]
 800596e:	18cc      	adds	r4, r1, r3
 8005970:	4630      	mov	r0, r6
 8005972:	f000 f85c 	bl	8005a2e <__malloc_unlock>
 8005976:	f104 000b 	add.w	r0, r4, #11
 800597a:	1d23      	adds	r3, r4, #4
 800597c:	f020 0007 	bic.w	r0, r0, #7
 8005980:	1ac3      	subs	r3, r0, r3
 8005982:	d0d3      	beq.n	800592c <_malloc_r+0x20>
 8005984:	425a      	negs	r2, r3
 8005986:	50e2      	str	r2, [r4, r3]
 8005988:	e7d0      	b.n	800592c <_malloc_r+0x20>
 800598a:	428c      	cmp	r4, r1
 800598c:	684b      	ldr	r3, [r1, #4]
 800598e:	bf16      	itet	ne
 8005990:	6063      	strne	r3, [r4, #4]
 8005992:	6013      	streq	r3, [r2, #0]
 8005994:	460c      	movne	r4, r1
 8005996:	e7eb      	b.n	8005970 <_malloc_r+0x64>
 8005998:	460c      	mov	r4, r1
 800599a:	6849      	ldr	r1, [r1, #4]
 800599c:	e7cc      	b.n	8005938 <_malloc_r+0x2c>
 800599e:	1cc4      	adds	r4, r0, #3
 80059a0:	f024 0403 	bic.w	r4, r4, #3
 80059a4:	42a0      	cmp	r0, r4
 80059a6:	d005      	beq.n	80059b4 <_malloc_r+0xa8>
 80059a8:	1a21      	subs	r1, r4, r0
 80059aa:	4630      	mov	r0, r6
 80059ac:	f000 f82e 	bl	8005a0c <_sbrk_r>
 80059b0:	3001      	adds	r0, #1
 80059b2:	d0cf      	beq.n	8005954 <_malloc_r+0x48>
 80059b4:	6025      	str	r5, [r4, #0]
 80059b6:	e7db      	b.n	8005970 <_malloc_r+0x64>
 80059b8:	20000af0 	.word	0x20000af0
 80059bc:	20000af4 	.word	0x20000af4

080059c0 <_realloc_r>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	4607      	mov	r7, r0
 80059c4:	4614      	mov	r4, r2
 80059c6:	460e      	mov	r6, r1
 80059c8:	b921      	cbnz	r1, 80059d4 <_realloc_r+0x14>
 80059ca:	4611      	mov	r1, r2
 80059cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059d0:	f7ff bf9c 	b.w	800590c <_malloc_r>
 80059d4:	b922      	cbnz	r2, 80059e0 <_realloc_r+0x20>
 80059d6:	f000 f82b 	bl	8005a30 <_free_r>
 80059da:	4625      	mov	r5, r4
 80059dc:	4628      	mov	r0, r5
 80059de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e0:	f000 f874 	bl	8005acc <_malloc_usable_size_r>
 80059e4:	42a0      	cmp	r0, r4
 80059e6:	d20f      	bcs.n	8005a08 <_realloc_r+0x48>
 80059e8:	4621      	mov	r1, r4
 80059ea:	4638      	mov	r0, r7
 80059ec:	f7ff ff8e 	bl	800590c <_malloc_r>
 80059f0:	4605      	mov	r5, r0
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d0f2      	beq.n	80059dc <_realloc_r+0x1c>
 80059f6:	4631      	mov	r1, r6
 80059f8:	4622      	mov	r2, r4
 80059fa:	f7ff ff27 	bl	800584c <memcpy>
 80059fe:	4631      	mov	r1, r6
 8005a00:	4638      	mov	r0, r7
 8005a02:	f000 f815 	bl	8005a30 <_free_r>
 8005a06:	e7e9      	b.n	80059dc <_realloc_r+0x1c>
 8005a08:	4635      	mov	r5, r6
 8005a0a:	e7e7      	b.n	80059dc <_realloc_r+0x1c>

08005a0c <_sbrk_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4c06      	ldr	r4, [pc, #24]	; (8005a28 <_sbrk_r+0x1c>)
 8005a10:	2300      	movs	r3, #0
 8005a12:	4605      	mov	r5, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	6023      	str	r3, [r4, #0]
 8005a18:	f7fc ff78 	bl	800290c <_sbrk>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d102      	bne.n	8005a26 <_sbrk_r+0x1a>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	b103      	cbz	r3, 8005a26 <_sbrk_r+0x1a>
 8005a24:	602b      	str	r3, [r5, #0]
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	20000afc 	.word	0x20000afc

08005a2c <__malloc_lock>:
 8005a2c:	4770      	bx	lr

08005a2e <__malloc_unlock>:
 8005a2e:	4770      	bx	lr

08005a30 <_free_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4605      	mov	r5, r0
 8005a34:	2900      	cmp	r1, #0
 8005a36:	d045      	beq.n	8005ac4 <_free_r+0x94>
 8005a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a3c:	1f0c      	subs	r4, r1, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bfb8      	it	lt
 8005a42:	18e4      	addlt	r4, r4, r3
 8005a44:	f7ff fff2 	bl	8005a2c <__malloc_lock>
 8005a48:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <_free_r+0x98>)
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	b933      	cbnz	r3, 8005a5e <_free_r+0x2e>
 8005a50:	6063      	str	r3, [r4, #4]
 8005a52:	6014      	str	r4, [r2, #0]
 8005a54:	4628      	mov	r0, r5
 8005a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a5a:	f7ff bfe8 	b.w	8005a2e <__malloc_unlock>
 8005a5e:	42a3      	cmp	r3, r4
 8005a60:	d90c      	bls.n	8005a7c <_free_r+0x4c>
 8005a62:	6821      	ldr	r1, [r4, #0]
 8005a64:	1862      	adds	r2, r4, r1
 8005a66:	4293      	cmp	r3, r2
 8005a68:	bf04      	itt	eq
 8005a6a:	681a      	ldreq	r2, [r3, #0]
 8005a6c:	685b      	ldreq	r3, [r3, #4]
 8005a6e:	6063      	str	r3, [r4, #4]
 8005a70:	bf04      	itt	eq
 8005a72:	1852      	addeq	r2, r2, r1
 8005a74:	6022      	streq	r2, [r4, #0]
 8005a76:	6004      	str	r4, [r0, #0]
 8005a78:	e7ec      	b.n	8005a54 <_free_r+0x24>
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	b10a      	cbz	r2, 8005a84 <_free_r+0x54>
 8005a80:	42a2      	cmp	r2, r4
 8005a82:	d9fa      	bls.n	8005a7a <_free_r+0x4a>
 8005a84:	6819      	ldr	r1, [r3, #0]
 8005a86:	1858      	adds	r0, r3, r1
 8005a88:	42a0      	cmp	r0, r4
 8005a8a:	d10b      	bne.n	8005aa4 <_free_r+0x74>
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	4401      	add	r1, r0
 8005a90:	1858      	adds	r0, r3, r1
 8005a92:	4282      	cmp	r2, r0
 8005a94:	6019      	str	r1, [r3, #0]
 8005a96:	d1dd      	bne.n	8005a54 <_free_r+0x24>
 8005a98:	6810      	ldr	r0, [r2, #0]
 8005a9a:	6852      	ldr	r2, [r2, #4]
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	4401      	add	r1, r0
 8005aa0:	6019      	str	r1, [r3, #0]
 8005aa2:	e7d7      	b.n	8005a54 <_free_r+0x24>
 8005aa4:	d902      	bls.n	8005aac <_free_r+0x7c>
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	e7d3      	b.n	8005a54 <_free_r+0x24>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	1821      	adds	r1, r4, r0
 8005ab0:	428a      	cmp	r2, r1
 8005ab2:	bf04      	itt	eq
 8005ab4:	6811      	ldreq	r1, [r2, #0]
 8005ab6:	6852      	ldreq	r2, [r2, #4]
 8005ab8:	6062      	str	r2, [r4, #4]
 8005aba:	bf04      	itt	eq
 8005abc:	1809      	addeq	r1, r1, r0
 8005abe:	6021      	streq	r1, [r4, #0]
 8005ac0:	605c      	str	r4, [r3, #4]
 8005ac2:	e7c7      	b.n	8005a54 <_free_r+0x24>
 8005ac4:	bd38      	pop	{r3, r4, r5, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000af0 	.word	0x20000af0

08005acc <_malloc_usable_size_r>:
 8005acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ad0:	1f18      	subs	r0, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bfbc      	itt	lt
 8005ad6:	580b      	ldrlt	r3, [r1, r0]
 8005ad8:	18c0      	addlt	r0, r0, r3
 8005ada:	4770      	bx	lr

08005adc <_init>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr

08005ae8 <_fini>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr
